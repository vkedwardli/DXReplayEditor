// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdxsv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gdxsv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gdxsv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gdxsv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdxsv_2eproto;
namespace proto {
class BattleLogFile;
class BattleLogFileDefaultTypeInternal;
extern BattleLogFileDefaultTypeInternal _BattleLogFile_default_instance_;
class BattleLogUser;
class BattleLogUserDefaultTypeInternal;
extern BattleLogUserDefaultTypeInternal _BattleLogUser_default_instance_;
class BattleMessage;
class BattleMessageDefaultTypeInternal;
extern BattleMessageDefaultTypeInternal _BattleMessage_default_instance_;
class FinMessage;
class FinMessageDefaultTypeInternal;
extern FinMessageDefaultTypeInternal _FinMessage_default_instance_;
class GamePatch;
class GamePatchDefaultTypeInternal;
extern GamePatchDefaultTypeInternal _GamePatch_default_instance_;
class GamePatchCode;
class GamePatchCodeDefaultTypeInternal;
extern GamePatchCodeDefaultTypeInternal _GamePatchCode_default_instance_;
class GamePatchList;
class GamePatchListDefaultTypeInternal;
extern GamePatchListDefaultTypeInternal _GamePatchList_default_instance_;
class HelloLbsMessage;
class HelloLbsMessageDefaultTypeInternal;
extern HelloLbsMessageDefaultTypeInternal _HelloLbsMessage_default_instance_;
class HelloServerMessage;
class HelloServerMessageDefaultTypeInternal;
extern HelloServerMessageDefaultTypeInternal _HelloServerMessage_default_instance_;
class P2PMatching;
class P2PMatchingDefaultTypeInternal;
extern P2PMatchingDefaultTypeInternal _P2PMatching_default_instance_;
class P2PMatchingReport;
class P2PMatchingReportDefaultTypeInternal;
extern P2PMatchingReportDefaultTypeInternal _P2PMatchingReport_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PingMessage;
class PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class PlayerAddress;
class PlayerAddressDefaultTypeInternal;
extern PlayerAddressDefaultTypeInternal _PlayerAddress_default_instance_;
class PongMessage;
class PongMessageDefaultTypeInternal;
extern PongMessageDefaultTypeInternal _PongMessage_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BattleLogFile* Arena::CreateMaybeMessage<::proto::BattleLogFile>(Arena*);
template<> ::proto::BattleLogUser* Arena::CreateMaybeMessage<::proto::BattleLogUser>(Arena*);
template<> ::proto::BattleMessage* Arena::CreateMaybeMessage<::proto::BattleMessage>(Arena*);
template<> ::proto::FinMessage* Arena::CreateMaybeMessage<::proto::FinMessage>(Arena*);
template<> ::proto::GamePatch* Arena::CreateMaybeMessage<::proto::GamePatch>(Arena*);
template<> ::proto::GamePatchCode* Arena::CreateMaybeMessage<::proto::GamePatchCode>(Arena*);
template<> ::proto::GamePatchList* Arena::CreateMaybeMessage<::proto::GamePatchList>(Arena*);
template<> ::proto::HelloLbsMessage* Arena::CreateMaybeMessage<::proto::HelloLbsMessage>(Arena*);
template<> ::proto::HelloServerMessage* Arena::CreateMaybeMessage<::proto::HelloServerMessage>(Arena*);
template<> ::proto::P2PMatching* Arena::CreateMaybeMessage<::proto::P2PMatching>(Arena*);
template<> ::proto::P2PMatchingReport* Arena::CreateMaybeMessage<::proto::P2PMatchingReport>(Arena*);
template<> ::proto::Packet* Arena::CreateMaybeMessage<::proto::Packet>(Arena*);
template<> ::proto::PingMessage* Arena::CreateMaybeMessage<::proto::PingMessage>(Arena*);
template<> ::proto::PlayerAddress* Arena::CreateMaybeMessage<::proto::PlayerAddress>(Arena*);
template<> ::proto::PongMessage* Arena::CreateMaybeMessage<::proto::PongMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum MessageType : int {
  None = 0,
  HelloServer = 1,
  Ping = 2,
  Pong = 3,
  Battle = 4,
  Fin = 5,
  HelloLbs = 10,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = None;
constexpr MessageType MessageType_MAX = HelloLbs;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class P2PMatchingReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.P2PMatchingReport) */ {
 public:
  inline P2PMatchingReport() : P2PMatchingReport(nullptr) {}
  virtual ~P2PMatchingReport();

  P2PMatchingReport(const P2PMatchingReport& from);
  P2PMatchingReport(P2PMatchingReport&& from) noexcept
    : P2PMatchingReport() {
    *this = ::std::move(from);
  }

  inline P2PMatchingReport& operator=(const P2PMatchingReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2PMatchingReport& operator=(P2PMatchingReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2PMatchingReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P2PMatchingReport* internal_default_instance() {
    return reinterpret_cast<const P2PMatchingReport*>(
               &_P2PMatchingReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(P2PMatchingReport& a, P2PMatchingReport& b) {
    a.Swap(&b);
  }
  inline void Swap(P2PMatchingReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2PMatchingReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2PMatchingReport* New() const final {
    return CreateMaybeMessage<P2PMatchingReport>(nullptr);
  }

  P2PMatchingReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2PMatchingReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2PMatchingReport& from);
  void MergeFrom(const P2PMatchingReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2PMatchingReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.P2PMatchingReport";
  }
  protected:
  explicit P2PMatchingReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsHistoryFieldNumber = 15,
    kBattleCodeFieldNumber = 1,
    kCloseReasonFieldNumber = 5,
    kAfterLogFieldNumber = 11,
    kBeforeLogFieldNumber = 12,
    kSessionIdFieldNumber = 2,
    kPlayerCountFieldNumber = 3,
    kPeerIdFieldNumber = 4,
    kFrameCountFieldNumber = 6,
    kDisconnectedPeerIdFieldNumber = 7,
    kTotalTimesyncFieldNumber = 16,
    kInputBlockCount2FieldNumber = 19,
    kInputBlockCount0FieldNumber = 17,
    kInputBlockCount1FieldNumber = 18,
  };
  // repeated float fps_history = 15;
  int fps_history_size() const;
  private:
  int _internal_fps_history_size() const;
  public:
  void clear_fps_history();
  private:
  float _internal_fps_history(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fps_history() const;
  void _internal_add_fps_history(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fps_history();
  public:
  float fps_history(int index) const;
  void set_fps_history(int index, float value);
  void add_fps_history(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fps_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fps_history();

  // string battle_code = 1;
  void clear_battle_code();
  const std::string& battle_code() const;
  void set_battle_code(const std::string& value);
  void set_battle_code(std::string&& value);
  void set_battle_code(const char* value);
  void set_battle_code(const char* value, size_t size);
  std::string* mutable_battle_code();
  std::string* release_battle_code();
  void set_allocated_battle_code(std::string* battle_code);
  private:
  const std::string& _internal_battle_code() const;
  void _internal_set_battle_code(const std::string& value);
  std::string* _internal_mutable_battle_code();
  public:

  // string close_reason = 5;
  void clear_close_reason();
  const std::string& close_reason() const;
  void set_close_reason(const std::string& value);
  void set_close_reason(std::string&& value);
  void set_close_reason(const char* value);
  void set_close_reason(const char* value, size_t size);
  std::string* mutable_close_reason();
  std::string* release_close_reason();
  void set_allocated_close_reason(std::string* close_reason);
  private:
  const std::string& _internal_close_reason() const;
  void _internal_set_close_reason(const std::string& value);
  std::string* _internal_mutable_close_reason();
  public:

  // string after_log = 11;
  void clear_after_log();
  const std::string& after_log() const;
  void set_after_log(const std::string& value);
  void set_after_log(std::string&& value);
  void set_after_log(const char* value);
  void set_after_log(const char* value, size_t size);
  std::string* mutable_after_log();
  std::string* release_after_log();
  void set_allocated_after_log(std::string* after_log);
  private:
  const std::string& _internal_after_log() const;
  void _internal_set_after_log(const std::string& value);
  std::string* _internal_mutable_after_log();
  public:

  // string before_log = 12;
  void clear_before_log();
  const std::string& before_log() const;
  void set_before_log(const std::string& value);
  void set_before_log(std::string&& value);
  void set_before_log(const char* value);
  void set_before_log(const char* value, size_t size);
  std::string* mutable_before_log();
  std::string* release_before_log();
  void set_allocated_before_log(std::string* before_log);
  private:
  const std::string& _internal_before_log() const;
  void _internal_set_before_log(const std::string& value);
  std::string* _internal_mutable_before_log();
  public:

  // int32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_count = 3;
  void clear_player_count();
  ::PROTOBUF_NAMESPACE_ID::int32 player_count() const;
  void set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_count() const;
  void _internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peer_id = 4;
  void clear_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id() const;
  void set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peer_id() const;
  void _internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 frame_count = 6;
  void clear_frame_count();
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count() const;
  void set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frame_count() const;
  void _internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 disconnected_peer_id = 7;
  void clear_disconnected_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 disconnected_peer_id() const;
  void set_disconnected_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disconnected_peer_id() const;
  void _internal_set_disconnected_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_timesync = 16;
  void clear_total_timesync();
  ::PROTOBUF_NAMESPACE_ID::int32 total_timesync() const;
  void set_total_timesync(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_timesync() const;
  void _internal_set_total_timesync(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 input_block_count_2 = 19;
  void clear_input_block_count_2();
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_2() const;
  void set_input_block_count_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_block_count_2() const;
  void _internal_set_input_block_count_2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 input_block_count_0 = 17;
  void clear_input_block_count_0();
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_0() const;
  void set_input_block_count_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_block_count_0() const;
  void _internal_set_input_block_count_0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 input_block_count_1 = 18;
  void clear_input_block_count_1();
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_1() const;
  void set_input_block_count_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input_block_count_1() const;
  void _internal_set_input_block_count_1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.P2PMatchingReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fps_history_;
  mutable std::atomic<int> _fps_history_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr after_log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr before_log_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 frame_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 disconnected_peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_timesync_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_block_count_1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class P2PMatching PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.P2PMatching) */ {
 public:
  inline P2PMatching() : P2PMatching(nullptr) {}
  virtual ~P2PMatching();

  P2PMatching(const P2PMatching& from);
  P2PMatching(P2PMatching&& from) noexcept
    : P2PMatching() {
    *this = ::std::move(from);
  }

  inline P2PMatching& operator=(const P2PMatching& from) {
    CopyFrom(from);
    return *this;
  }
  inline P2PMatching& operator=(P2PMatching&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const P2PMatching& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P2PMatching* internal_default_instance() {
    return reinterpret_cast<const P2PMatching*>(
               &_P2PMatching_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(P2PMatching& a, P2PMatching& b) {
    a.Swap(&b);
  }
  inline void Swap(P2PMatching* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(P2PMatching* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline P2PMatching* New() const final {
    return CreateMaybeMessage<P2PMatching>(nullptr);
  }

  P2PMatching* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<P2PMatching>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const P2PMatching& from);
  void MergeFrom(const P2PMatching& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P2PMatching* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.P2PMatching";
  }
  protected:
  explicit P2PMatching(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 9,
    kCandidatesFieldNumber = 10,
    kBattleCodeFieldNumber = 1,
    kRuleBinFieldNumber = 8,
    kSessionIdFieldNumber = 2,
    kPlayerCountFieldNumber = 3,
    kPeerIdFieldNumber = 4,
    kPingTestDurationFieldNumber = 6,
    kIsTrainingGameFieldNumber = 7,
  };
  // repeated .proto.BattleLogUser users = 9;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::proto::BattleLogUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
      mutable_users();
  private:
  const ::proto::BattleLogUser& _internal_users(int index) const;
  ::proto::BattleLogUser* _internal_add_users();
  public:
  const ::proto::BattleLogUser& users(int index) const;
  ::proto::BattleLogUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
      users() const;

  // repeated .proto.PlayerAddress candidates = 10;
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::proto::PlayerAddress* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PlayerAddress >*
      mutable_candidates();
  private:
  const ::proto::PlayerAddress& _internal_candidates(int index) const;
  ::proto::PlayerAddress* _internal_add_candidates();
  public:
  const ::proto::PlayerAddress& candidates(int index) const;
  ::proto::PlayerAddress* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PlayerAddress >&
      candidates() const;

  // string battle_code = 1;
  void clear_battle_code();
  const std::string& battle_code() const;
  void set_battle_code(const std::string& value);
  void set_battle_code(std::string&& value);
  void set_battle_code(const char* value);
  void set_battle_code(const char* value, size_t size);
  std::string* mutable_battle_code();
  std::string* release_battle_code();
  void set_allocated_battle_code(std::string* battle_code);
  private:
  const std::string& _internal_battle_code() const;
  void _internal_set_battle_code(const std::string& value);
  std::string* _internal_mutable_battle_code();
  public:

  // bytes rule_bin = 8;
  void clear_rule_bin();
  const std::string& rule_bin() const;
  void set_rule_bin(const std::string& value);
  void set_rule_bin(std::string&& value);
  void set_rule_bin(const char* value);
  void set_rule_bin(const void* value, size_t size);
  std::string* mutable_rule_bin();
  std::string* release_rule_bin();
  void set_allocated_rule_bin(std::string* rule_bin);
  private:
  const std::string& _internal_rule_bin() const;
  void _internal_set_rule_bin(const std::string& value);
  std::string* _internal_mutable_rule_bin();
  public:

  // int32 session_id = 2;
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_count = 3;
  void clear_player_count();
  ::PROTOBUF_NAMESPACE_ID::int32 player_count() const;
  void set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_count() const;
  void _internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 peer_id = 4;
  void clear_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id() const;
  void set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peer_id() const;
  void _internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ping_test_duration = 6;
  void clear_ping_test_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 ping_test_duration() const;
  void set_ping_test_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ping_test_duration() const;
  void _internal_set_ping_test_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_training_game = 7;
  void clear_is_training_game();
  bool is_training_game() const;
  void set_is_training_game(bool value);
  private:
  bool _internal_is_training_game() const;
  void _internal_set_is_training_game(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.P2PMatching)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PlayerAddress > candidates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_bin_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ping_test_duration_;
  bool is_training_game_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class PlayerAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PlayerAddress) */ {
 public:
  inline PlayerAddress() : PlayerAddress(nullptr) {}
  virtual ~PlayerAddress();

  PlayerAddress(const PlayerAddress& from);
  PlayerAddress(PlayerAddress&& from) noexcept
    : PlayerAddress() {
    *this = ::std::move(from);
  }

  inline PlayerAddress& operator=(const PlayerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAddress& operator=(PlayerAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAddress* internal_default_instance() {
    return reinterpret_cast<const PlayerAddress*>(
               &_PlayerAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerAddress& a, PlayerAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAddress* New() const final {
    return CreateMaybeMessage<PlayerAddress>(nullptr);
  }

  PlayerAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAddress& from);
  void MergeFrom(const PlayerAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PlayerAddress";
  }
  protected:
  explicit PlayerAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kIpFieldNumber = 3,
    kPeerIdFieldNumber = 2,
    kPortFieldNumber = 4,
    kTeamFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 peer_id = 2;
  void clear_peer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id() const;
  void set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peer_id() const;
  void _internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 team = 5;
  void clear_team();
  ::PROTOBUF_NAMESPACE_ID::int32 team() const;
  void set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team() const;
  void _internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PlayerAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 peer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class GamePatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GamePatch) */ {
 public:
  inline GamePatch() : GamePatch(nullptr) {}
  virtual ~GamePatch();

  GamePatch(const GamePatch& from);
  GamePatch(GamePatch&& from) noexcept
    : GamePatch() {
    *this = ::std::move(from);
  }

  inline GamePatch& operator=(const GamePatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePatch& operator=(GamePatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePatch* internal_default_instance() {
    return reinterpret_cast<const GamePatch*>(
               &_GamePatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GamePatch& a, GamePatch& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GamePatch* New() const final {
    return CreateMaybeMessage<GamePatch>(nullptr);
  }

  GamePatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePatch& from);
  void MergeFrom(const GamePatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GamePatch";
  }
  protected:
  explicit GamePatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodesFieldNumber = 10,
    kGameDiskFieldNumber = 1,
    kNameFieldNumber = 2,
    kWriteOnceFieldNumber = 4,
  };
  // repeated .proto.GamePatchCode codes = 10;
  int codes_size() const;
  private:
  int _internal_codes_size() const;
  public:
  void clear_codes();
  ::proto::GamePatchCode* mutable_codes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatchCode >*
      mutable_codes();
  private:
  const ::proto::GamePatchCode& _internal_codes(int index) const;
  ::proto::GamePatchCode* _internal_add_codes();
  public:
  const ::proto::GamePatchCode& codes(int index) const;
  ::proto::GamePatchCode* add_codes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatchCode >&
      codes() const;

  // string game_disk = 1;
  void clear_game_disk();
  const std::string& game_disk() const;
  void set_game_disk(const std::string& value);
  void set_game_disk(std::string&& value);
  void set_game_disk(const char* value);
  void set_game_disk(const char* value, size_t size);
  std::string* mutable_game_disk();
  std::string* release_game_disk();
  void set_allocated_game_disk(std::string* game_disk);
  private:
  const std::string& _internal_game_disk() const;
  void _internal_set_game_disk(const std::string& value);
  std::string* _internal_mutable_game_disk();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool write_once = 4;
  void clear_write_once();
  bool write_once() const;
  void set_write_once(bool value);
  private:
  bool _internal_write_once() const;
  void _internal_set_write_once(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GamePatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatchCode > codes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_disk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool write_once_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class GamePatchCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GamePatchCode) */ {
 public:
  inline GamePatchCode() : GamePatchCode(nullptr) {}
  virtual ~GamePatchCode();

  GamePatchCode(const GamePatchCode& from);
  GamePatchCode(GamePatchCode&& from) noexcept
    : GamePatchCode() {
    *this = ::std::move(from);
  }

  inline GamePatchCode& operator=(const GamePatchCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePatchCode& operator=(GamePatchCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePatchCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePatchCode* internal_default_instance() {
    return reinterpret_cast<const GamePatchCode*>(
               &_GamePatchCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GamePatchCode& a, GamePatchCode& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePatchCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePatchCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GamePatchCode* New() const final {
    return CreateMaybeMessage<GamePatchCode>(nullptr);
  }

  GamePatchCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePatchCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePatchCode& from);
  void MergeFrom(const GamePatchCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePatchCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GamePatchCode";
  }
  protected:
  explicit GamePatchCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kAddressFieldNumber = 2,
    kOriginalFieldNumber = 3,
    kChangedFieldNumber = 4,
  };
  // int32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 original = 3;
  void clear_original();
  ::PROTOBUF_NAMESPACE_ID::uint32 original() const;
  void set_original(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_original() const;
  void _internal_set_original(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 changed = 4;
  void clear_changed();
  ::PROTOBUF_NAMESPACE_ID::uint32 changed() const;
  void set_changed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_changed() const;
  void _internal_set_changed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.GamePatchCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 original_;
  ::PROTOBUF_NAMESPACE_ID::uint32 changed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class GamePatchList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GamePatchList) */ {
 public:
  inline GamePatchList() : GamePatchList(nullptr) {}
  virtual ~GamePatchList();

  GamePatchList(const GamePatchList& from);
  GamePatchList(GamePatchList&& from) noexcept
    : GamePatchList() {
    *this = ::std::move(from);
  }

  inline GamePatchList& operator=(const GamePatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePatchList& operator=(GamePatchList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GamePatchList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GamePatchList* internal_default_instance() {
    return reinterpret_cast<const GamePatchList*>(
               &_GamePatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GamePatchList& a, GamePatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(GamePatchList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GamePatchList* New() const final {
    return CreateMaybeMessage<GamePatchList>(nullptr);
  }

  GamePatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GamePatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GamePatchList& from);
  void MergeFrom(const GamePatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamePatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GamePatchList";
  }
  protected:
  explicit GamePatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatchesFieldNumber = 1,
  };
  // repeated .proto.GamePatch patches = 1;
  int patches_size() const;
  private:
  int _internal_patches_size() const;
  public:
  void clear_patches();
  ::proto::GamePatch* mutable_patches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >*
      mutable_patches();
  private:
  const ::proto::GamePatch& _internal_patches(int index) const;
  ::proto::GamePatch* _internal_add_patches();
  public:
  const ::proto::GamePatch& patches(int index) const;
  ::proto::GamePatch* add_patches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >&
      patches() const;

  // @@protoc_insertion_point(class_scope:proto.GamePatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch > patches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class BattleLogUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleLogUser) */ {
 public:
  inline BattleLogUser() : BattleLogUser(nullptr) {}
  virtual ~BattleLogUser();

  BattleLogUser(const BattleLogUser& from);
  BattleLogUser(BattleLogUser&& from) noexcept
    : BattleLogUser() {
    *this = ::std::move(from);
  }

  inline BattleLogUser& operator=(const BattleLogUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleLogUser& operator=(BattleLogUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleLogUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleLogUser* internal_default_instance() {
    return reinterpret_cast<const BattleLogUser*>(
               &_BattleLogUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BattleLogUser& a, BattleLogUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleLogUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleLogUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleLogUser* New() const final {
    return CreateMaybeMessage<BattleLogUser>(nullptr);
  }

  BattleLogUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleLogUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleLogUser& from);
  void MergeFrom(const BattleLogUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleLogUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleLogUser";
  }
  protected:
  explicit BattleLogUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kPilotNameFieldNumber = 3,
    kGameParamFieldNumber = 4,
    kPlatformFieldNumber = 10,
    kUserNameSjisFieldNumber = 11,
    kBattleCountFieldNumber = 5,
    kWinCountFieldNumber = 6,
    kLoseCountFieldNumber = 7,
    kGradeFieldNumber = 8,
    kTeamFieldNumber = 9,
    kPosFieldNumber = 12,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string pilot_name = 3;
  void clear_pilot_name();
  const std::string& pilot_name() const;
  void set_pilot_name(const std::string& value);
  void set_pilot_name(std::string&& value);
  void set_pilot_name(const char* value);
  void set_pilot_name(const char* value, size_t size);
  std::string* mutable_pilot_name();
  std::string* release_pilot_name();
  void set_allocated_pilot_name(std::string* pilot_name);
  private:
  const std::string& _internal_pilot_name() const;
  void _internal_set_pilot_name(const std::string& value);
  std::string* _internal_mutable_pilot_name();
  public:

  // bytes game_param = 4;
  void clear_game_param();
  const std::string& game_param() const;
  void set_game_param(const std::string& value);
  void set_game_param(std::string&& value);
  void set_game_param(const char* value);
  void set_game_param(const void* value, size_t size);
  std::string* mutable_game_param();
  std::string* release_game_param();
  void set_allocated_game_param(std::string* game_param);
  private:
  const std::string& _internal_game_param() const;
  void _internal_set_game_param(const std::string& value);
  std::string* _internal_mutable_game_param();
  public:

  // string platform = 10;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // bytes user_name_sjis = 11;
  void clear_user_name_sjis();
  const std::string& user_name_sjis() const;
  void set_user_name_sjis(const std::string& value);
  void set_user_name_sjis(std::string&& value);
  void set_user_name_sjis(const char* value);
  void set_user_name_sjis(const void* value, size_t size);
  std::string* mutable_user_name_sjis();
  std::string* release_user_name_sjis();
  void set_allocated_user_name_sjis(std::string* user_name_sjis);
  private:
  const std::string& _internal_user_name_sjis() const;
  void _internal_set_user_name_sjis(const std::string& value);
  std::string* _internal_mutable_user_name_sjis();
  public:

  // int32 battle_count = 5;
  void clear_battle_count();
  ::PROTOBUF_NAMESPACE_ID::int32 battle_count() const;
  void set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battle_count() const;
  void _internal_set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 win_count = 6;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lose_count = 7;
  void clear_lose_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count() const;
  void set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_count() const;
  void _internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 grade = 8;
  void clear_grade();
  ::PROTOBUF_NAMESPACE_ID::int32 grade() const;
  void set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_grade() const;
  void _internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 team = 9;
  void clear_team();
  ::PROTOBUF_NAMESPACE_ID::int32 team() const;
  void set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team() const;
  void _internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pos = 12;
  void clear_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 pos() const;
  void set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos() const;
  void _internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleLogUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pilot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_sjis_;
  ::PROTOBUF_NAMESPACE_ID::int32 battle_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 grade_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class BattleLogFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleLogFile) */ {
 public:
  inline BattleLogFile() : BattleLogFile(nullptr) {}
  virtual ~BattleLogFile();

  BattleLogFile(const BattleLogFile& from);
  BattleLogFile(BattleLogFile&& from) noexcept
    : BattleLogFile() {
    *this = ::std::move(from);
  }

  inline BattleLogFile& operator=(const BattleLogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleLogFile& operator=(BattleLogFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleLogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleLogFile* internal_default_instance() {
    return reinterpret_cast<const BattleLogFile*>(
               &_BattleLogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BattleLogFile& a, BattleLogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleLogFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleLogFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleLogFile* New() const final {
    return CreateMaybeMessage<BattleLogFile>(nullptr);
  }

  BattleLogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleLogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleLogFile& from);
  void MergeFrom(const BattleLogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleLogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleLogFile";
  }
  protected:
  explicit BattleLogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatchesFieldNumber = 7,
    kUsersFieldNumber = 11,
    kBattleDataFieldNumber = 12,
    kInputsFieldNumber = 15,
    kStartMsgIndexesFieldNumber = 16,
    kStartMsgRandomsFieldNumber = 17,
    kGdxsvVersionDeprecatedFieldNumber = 2,
    kBattleCodeFieldNumber = 3,
    kGameDiskFieldNumber = 5,
    kRuleBinFieldNumber = 10,
    kCloseReasonFieldNumber = 24,
    kLogFileVersionFieldNumber = 4,
    kDisconnectUserIndexFieldNumber = 25,
    kStartAtFieldNumber = 20,
    kEndAtFieldNumber = 21,
  };
  // repeated .proto.GamePatch patches = 7;
  int patches_size() const;
  private:
  int _internal_patches_size() const;
  public:
  void clear_patches();
  ::proto::GamePatch* mutable_patches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >*
      mutable_patches();
  private:
  const ::proto::GamePatch& _internal_patches(int index) const;
  ::proto::GamePatch* _internal_add_patches();
  public:
  const ::proto::GamePatch& patches(int index) const;
  ::proto::GamePatch* add_patches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >&
      patches() const;

  // repeated .proto.BattleLogUser users = 11;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::proto::BattleLogUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
      mutable_users();
  private:
  const ::proto::BattleLogUser& _internal_users(int index) const;
  ::proto::BattleLogUser* _internal_add_users();
  public:
  const ::proto::BattleLogUser& users(int index) const;
  ::proto::BattleLogUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
      users() const;

  // repeated .proto.BattleMessage battle_data = 12;
  int battle_data_size() const;
  private:
  int _internal_battle_data_size() const;
  public:
  void clear_battle_data();
  ::proto::BattleMessage* mutable_battle_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
      mutable_battle_data();
  private:
  const ::proto::BattleMessage& _internal_battle_data(int index) const;
  ::proto::BattleMessage* _internal_add_battle_data();
  public:
  const ::proto::BattleMessage& battle_data(int index) const;
  ::proto::BattleMessage* add_battle_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
      battle_data() const;

  // repeated fixed64 inputs = 15;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inputs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_inputs() const;
  void _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_inputs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 inputs(int index) const;
  void set_inputs(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_inputs();

  // repeated int32 start_msg_indexes = 16;
  int start_msg_indexes_size() const;
  private:
  int _internal_start_msg_indexes_size() const;
  public:
  void clear_start_msg_indexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_msg_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_start_msg_indexes() const;
  void _internal_add_start_msg_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_start_msg_indexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 start_msg_indexes(int index) const;
  void set_start_msg_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_start_msg_indexes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      start_msg_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_start_msg_indexes();

  // repeated uint64 start_msg_randoms = 17;
  int start_msg_randoms_size() const;
  private:
  int _internal_start_msg_randoms_size() const;
  public:
  void clear_start_msg_randoms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_msg_randoms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_start_msg_randoms() const;
  void _internal_add_start_msg_randoms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_start_msg_randoms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 start_msg_randoms(int index) const;
  void set_start_msg_randoms(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_start_msg_randoms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      start_msg_randoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_start_msg_randoms();

  // string gdxsv_version_deprecated = 2;
  void clear_gdxsv_version_deprecated();
  const std::string& gdxsv_version_deprecated() const;
  void set_gdxsv_version_deprecated(const std::string& value);
  void set_gdxsv_version_deprecated(std::string&& value);
  void set_gdxsv_version_deprecated(const char* value);
  void set_gdxsv_version_deprecated(const char* value, size_t size);
  std::string* mutable_gdxsv_version_deprecated();
  std::string* release_gdxsv_version_deprecated();
  void set_allocated_gdxsv_version_deprecated(std::string* gdxsv_version_deprecated);
  private:
  const std::string& _internal_gdxsv_version_deprecated() const;
  void _internal_set_gdxsv_version_deprecated(const std::string& value);
  std::string* _internal_mutable_gdxsv_version_deprecated();
  public:

  // string battle_code = 3;
  void clear_battle_code();
  const std::string& battle_code() const;
  void set_battle_code(const std::string& value);
  void set_battle_code(std::string&& value);
  void set_battle_code(const char* value);
  void set_battle_code(const char* value, size_t size);
  std::string* mutable_battle_code();
  std::string* release_battle_code();
  void set_allocated_battle_code(std::string* battle_code);
  private:
  const std::string& _internal_battle_code() const;
  void _internal_set_battle_code(const std::string& value);
  std::string* _internal_mutable_battle_code();
  public:

  // string game_disk = 5;
  void clear_game_disk();
  const std::string& game_disk() const;
  void set_game_disk(const std::string& value);
  void set_game_disk(std::string&& value);
  void set_game_disk(const char* value);
  void set_game_disk(const char* value, size_t size);
  std::string* mutable_game_disk();
  std::string* release_game_disk();
  void set_allocated_game_disk(std::string* game_disk);
  private:
  const std::string& _internal_game_disk() const;
  void _internal_set_game_disk(const std::string& value);
  std::string* _internal_mutable_game_disk();
  public:

  // bytes rule_bin = 10;
  void clear_rule_bin();
  const std::string& rule_bin() const;
  void set_rule_bin(const std::string& value);
  void set_rule_bin(std::string&& value);
  void set_rule_bin(const char* value);
  void set_rule_bin(const void* value, size_t size);
  std::string* mutable_rule_bin();
  std::string* release_rule_bin();
  void set_allocated_rule_bin(std::string* rule_bin);
  private:
  const std::string& _internal_rule_bin() const;
  void _internal_set_rule_bin(const std::string& value);
  std::string* _internal_mutable_rule_bin();
  public:

  // string close_reason = 24;
  void clear_close_reason();
  const std::string& close_reason() const;
  void set_close_reason(const std::string& value);
  void set_close_reason(std::string&& value);
  void set_close_reason(const char* value);
  void set_close_reason(const char* value, size_t size);
  std::string* mutable_close_reason();
  std::string* release_close_reason();
  void set_allocated_close_reason(std::string* close_reason);
  private:
  const std::string& _internal_close_reason() const;
  void _internal_set_close_reason(const std::string& value);
  std::string* _internal_mutable_close_reason();
  public:

  // int32 log_file_version = 4;
  void clear_log_file_version();
  ::PROTOBUF_NAMESPACE_ID::int32 log_file_version() const;
  void set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_file_version() const;
  void _internal_set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 disconnect_user_index = 25;
  void clear_disconnect_user_index();
  ::PROTOBUF_NAMESPACE_ID::int32 disconnect_user_index() const;
  void set_disconnect_user_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disconnect_user_index() const;
  void _internal_set_disconnect_user_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_at = 20;
  void clear_start_at();
  ::PROTOBUF_NAMESPACE_ID::int64 start_at() const;
  void set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_at() const;
  void _internal_set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_at = 21;
  void clear_end_at();
  ::PROTOBUF_NAMESPACE_ID::int64 end_at() const;
  void set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_at() const;
  void _internal_set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleLogFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch > patches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage > battle_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > inputs_;
  mutable std::atomic<int> _inputs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > start_msg_indexes_;
  mutable std::atomic<int> _start_msg_indexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > start_msg_randoms_;
  mutable std::atomic<int> _start_msg_randoms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gdxsv_version_deprecated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_disk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_bin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_file_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 disconnect_user_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class BattleMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleMessage) */ {
 public:
  inline BattleMessage() : BattleMessage(nullptr) {}
  virtual ~BattleMessage();

  BattleMessage(const BattleMessage& from);
  BattleMessage(BattleMessage&& from) noexcept
    : BattleMessage() {
    *this = ::std::move(from);
  }

  inline BattleMessage& operator=(const BattleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleMessage& operator=(BattleMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleMessage* internal_default_instance() {
    return reinterpret_cast<const BattleMessage*>(
               &_BattleMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BattleMessage& a, BattleMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleMessage* New() const final {
    return CreateMaybeMessage<BattleMessage>(nullptr);
  }

  BattleMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleMessage& from);
  void MergeFrom(const BattleMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleMessage";
  }
  protected:
  explicit BattleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBodyFieldNumber = 3,
    kSeqFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes body = 3;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // uint32 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class PingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PingMessage) */ {
 public:
  inline PingMessage() : PingMessage(nullptr) {}
  virtual ~PingMessage();

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const final {
    return CreateMaybeMessage<PingMessage>(nullptr);
  }

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PingMessage";
  }
  protected:
  explicit PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PingMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class PongMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.PongMessage) */ {
 public:
  inline PongMessage() : PongMessage(nullptr) {}
  virtual ~PongMessage();

  PongMessage(const PongMessage& from);
  PongMessage(PongMessage&& from) noexcept
    : PongMessage() {
    *this = ::std::move(from);
  }

  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongMessage& operator=(PongMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongMessage* internal_default_instance() {
    return reinterpret_cast<const PongMessage*>(
               &_PongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PongMessage& a, PongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PongMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PongMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongMessage* New() const final {
    return CreateMaybeMessage<PongMessage>(nullptr);
  }

  PongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongMessage& from);
  void MergeFrom(const PongMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PongMessage";
  }
  protected:
  explicit PongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kPublicAddrFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string public_addr = 3;
  void clear_public_addr();
  const std::string& public_addr() const;
  void set_public_addr(const std::string& value);
  void set_public_addr(std::string&& value);
  void set_public_addr(const char* value);
  void set_public_addr(const char* value, size_t size);
  std::string* mutable_public_addr();
  std::string* release_public_addr();
  void set_allocated_public_addr(std::string* public_addr);
  private:
  const std::string& _internal_public_addr() const;
  void _internal_set_public_addr(const std::string& value);
  std::string* _internal_mutable_public_addr();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PongMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class HelloServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.HelloServerMessage) */ {
 public:
  inline HelloServerMessage() : HelloServerMessage(nullptr) {}
  virtual ~HelloServerMessage();

  HelloServerMessage(const HelloServerMessage& from);
  HelloServerMessage(HelloServerMessage&& from) noexcept
    : HelloServerMessage() {
    *this = ::std::move(from);
  }

  inline HelloServerMessage& operator=(const HelloServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloServerMessage& operator=(HelloServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloServerMessage* internal_default_instance() {
    return reinterpret_cast<const HelloServerMessage*>(
               &_HelloServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(HelloServerMessage& a, HelloServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloServerMessage* New() const final {
    return CreateMaybeMessage<HelloServerMessage>(nullptr);
  }

  HelloServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloServerMessage& from);
  void MergeFrom(const HelloServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.HelloServerMessage";
  }
  protected:
  explicit HelloServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdDeprecatedFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOkFieldNumber = 2,
  };
  // string session_id_deprecated = 1;
  void clear_session_id_deprecated();
  const std::string& session_id_deprecated() const;
  void set_session_id_deprecated(const std::string& value);
  void set_session_id_deprecated(std::string&& value);
  void set_session_id_deprecated(const char* value);
  void set_session_id_deprecated(const char* value, size_t size);
  std::string* mutable_session_id_deprecated();
  std::string* release_session_id_deprecated();
  void set_allocated_session_id_deprecated(std::string* session_id_deprecated);
  private:
  const std::string& _internal_session_id_deprecated() const;
  void _internal_set_session_id_deprecated(const std::string& value);
  std::string* _internal_mutable_session_id_deprecated();
  public:

  // string user_id = 3;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bool ok = 2;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.HelloServerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_deprecated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class FinMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.FinMessage) */ {
 public:
  inline FinMessage() : FinMessage(nullptr) {}
  virtual ~FinMessage();

  FinMessage(const FinMessage& from);
  FinMessage(FinMessage&& from) noexcept
    : FinMessage() {
    *this = ::std::move(from);
  }

  inline FinMessage& operator=(const FinMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FinMessage& operator=(FinMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FinMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinMessage* internal_default_instance() {
    return reinterpret_cast<const FinMessage*>(
               &_FinMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FinMessage& a, FinMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FinMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FinMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FinMessage* New() const final {
    return CreateMaybeMessage<FinMessage>(nullptr);
  }

  FinMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FinMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FinMessage& from);
  void MergeFrom(const FinMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FinMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.FinMessage";
  }
  protected:
  explicit FinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // string detail = 1;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // @@protoc_insertion_point(class_scope:proto.FinMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class HelloLbsMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.HelloLbsMessage) */ {
 public:
  inline HelloLbsMessage() : HelloLbsMessage(nullptr) {}
  virtual ~HelloLbsMessage();

  HelloLbsMessage(const HelloLbsMessage& from);
  HelloLbsMessage(HelloLbsMessage&& from) noexcept
    : HelloLbsMessage() {
    *this = ::std::move(from);
  }

  inline HelloLbsMessage& operator=(const HelloLbsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloLbsMessage& operator=(HelloLbsMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloLbsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloLbsMessage* internal_default_instance() {
    return reinterpret_cast<const HelloLbsMessage*>(
               &_HelloLbsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(HelloLbsMessage& a, HelloLbsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloLbsMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloLbsMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloLbsMessage* New() const final {
    return CreateMaybeMessage<HelloLbsMessage>(nullptr);
  }

  HelloLbsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloLbsMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloLbsMessage& from);
  void MergeFrom(const HelloLbsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloLbsMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.HelloLbsMessage";
  }
  protected:
  explicit HelloLbsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.HelloLbsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gdxsv_2eproto);
    return ::descriptor_table_gdxsv_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleDataFieldNumber = 13,
    kSessionIdFieldNumber = 5,
    kHelloServerDataFieldNumber = 10,
    kPingDataFieldNumber = 11,
    kPongDataFieldNumber = 12,
    kFinDataFieldNumber = 14,
    kHelloLbsDataFieldNumber = 15,
    kTypeFieldNumber = 1,
    kSeqFieldNumber = 2,
    kAckFieldNumber = 3,
  };
  // repeated .proto.BattleMessage battle_data = 13;
  int battle_data_size() const;
  private:
  int _internal_battle_data_size() const;
  public:
  void clear_battle_data();
  ::proto::BattleMessage* mutable_battle_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
      mutable_battle_data();
  private:
  const ::proto::BattleMessage& _internal_battle_data(int index) const;
  ::proto::BattleMessage* _internal_add_battle_data();
  public:
  const ::proto::BattleMessage& battle_data(int index) const;
  ::proto::BattleMessage* add_battle_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
      battle_data() const;

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .proto.HelloServerMessage hello_server_data = 10;
  bool has_hello_server_data() const;
  private:
  bool _internal_has_hello_server_data() const;
  public:
  void clear_hello_server_data();
  const ::proto::HelloServerMessage& hello_server_data() const;
  ::proto::HelloServerMessage* release_hello_server_data();
  ::proto::HelloServerMessage* mutable_hello_server_data();
  void set_allocated_hello_server_data(::proto::HelloServerMessage* hello_server_data);
  private:
  const ::proto::HelloServerMessage& _internal_hello_server_data() const;
  ::proto::HelloServerMessage* _internal_mutable_hello_server_data();
  public:
  void unsafe_arena_set_allocated_hello_server_data(
      ::proto::HelloServerMessage* hello_server_data);
  ::proto::HelloServerMessage* unsafe_arena_release_hello_server_data();

  // .proto.PingMessage ping_data = 11;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::proto::PingMessage& ping_data() const;
  ::proto::PingMessage* release_ping_data();
  ::proto::PingMessage* mutable_ping_data();
  void set_allocated_ping_data(::proto::PingMessage* ping_data);
  private:
  const ::proto::PingMessage& _internal_ping_data() const;
  ::proto::PingMessage* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::proto::PingMessage* ping_data);
  ::proto::PingMessage* unsafe_arena_release_ping_data();

  // .proto.PongMessage pong_data = 12;
  bool has_pong_data() const;
  private:
  bool _internal_has_pong_data() const;
  public:
  void clear_pong_data();
  const ::proto::PongMessage& pong_data() const;
  ::proto::PongMessage* release_pong_data();
  ::proto::PongMessage* mutable_pong_data();
  void set_allocated_pong_data(::proto::PongMessage* pong_data);
  private:
  const ::proto::PongMessage& _internal_pong_data() const;
  ::proto::PongMessage* _internal_mutable_pong_data();
  public:
  void unsafe_arena_set_allocated_pong_data(
      ::proto::PongMessage* pong_data);
  ::proto::PongMessage* unsafe_arena_release_pong_data();

  // .proto.FinMessage fin_data = 14;
  bool has_fin_data() const;
  private:
  bool _internal_has_fin_data() const;
  public:
  void clear_fin_data();
  const ::proto::FinMessage& fin_data() const;
  ::proto::FinMessage* release_fin_data();
  ::proto::FinMessage* mutable_fin_data();
  void set_allocated_fin_data(::proto::FinMessage* fin_data);
  private:
  const ::proto::FinMessage& _internal_fin_data() const;
  ::proto::FinMessage* _internal_mutable_fin_data();
  public:
  void unsafe_arena_set_allocated_fin_data(
      ::proto::FinMessage* fin_data);
  ::proto::FinMessage* unsafe_arena_release_fin_data();

  // .proto.HelloLbsMessage hello_lbs_data = 15;
  bool has_hello_lbs_data() const;
  private:
  bool _internal_has_hello_lbs_data() const;
  public:
  void clear_hello_lbs_data();
  const ::proto::HelloLbsMessage& hello_lbs_data() const;
  ::proto::HelloLbsMessage* release_hello_lbs_data();
  ::proto::HelloLbsMessage* mutable_hello_lbs_data();
  void set_allocated_hello_lbs_data(::proto::HelloLbsMessage* hello_lbs_data);
  private:
  const ::proto::HelloLbsMessage& _internal_hello_lbs_data() const;
  ::proto::HelloLbsMessage* _internal_mutable_hello_lbs_data();
  public:
  void unsafe_arena_set_allocated_hello_lbs_data(
      ::proto::HelloLbsMessage* hello_lbs_data);
  ::proto::HelloLbsMessage* unsafe_arena_release_hello_lbs_data();

  // .proto.MessageType type = 1;
  void clear_type();
  ::proto::MessageType type() const;
  void set_type(::proto::MessageType value);
  private:
  ::proto::MessageType _internal_type() const;
  void _internal_set_type(::proto::MessageType value);
  public:

  // uint32 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ack = 3;
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage > battle_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::proto::HelloServerMessage* hello_server_data_;
  ::proto::PingMessage* ping_data_;
  ::proto::PongMessage* pong_data_;
  ::proto::FinMessage* fin_data_;
  ::proto::HelloLbsMessage* hello_lbs_data_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gdxsv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P2PMatchingReport

// string battle_code = 1;
inline void P2PMatchingReport::clear_battle_code() {
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatchingReport::battle_code() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.battle_code)
  return _internal_battle_code();
}
inline void P2PMatchingReport::set_battle_code(const std::string& value) {
  _internal_set_battle_code(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.battle_code)
}
inline std::string* P2PMatchingReport::mutable_battle_code() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatchingReport.battle_code)
  return _internal_mutable_battle_code();
}
inline const std::string& P2PMatchingReport::_internal_battle_code() const {
  return battle_code_.Get();
}
inline void P2PMatchingReport::_internal_set_battle_code(const std::string& value) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatchingReport::set_battle_code(std::string&& value) {
  
  battle_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatchingReport.battle_code)
}
inline void P2PMatchingReport::set_battle_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatchingReport.battle_code)
}
inline void P2PMatchingReport::set_battle_code(const char* value,
    size_t size) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatchingReport.battle_code)
}
inline std::string* P2PMatchingReport::_internal_mutable_battle_code() {
  
  return battle_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatchingReport::release_battle_code() {
  // @@protoc_insertion_point(field_release:proto.P2PMatchingReport.battle_code)
  return battle_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatchingReport::set_allocated_battle_code(std::string* battle_code) {
  if (battle_code != nullptr) {
    
  } else {
    
  }
  battle_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatchingReport.battle_code)
}

// int32 session_id = 2;
inline void P2PMatchingReport::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::session_id() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.session_id)
  return _internal_session_id();
}
inline void P2PMatchingReport::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void P2PMatchingReport::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.session_id)
}

// int32 player_count = 3;
inline void P2PMatchingReport::clear_player_count() {
  player_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_player_count() const {
  return player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::player_count() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.player_count)
  return _internal_player_count();
}
inline void P2PMatchingReport::_internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_count_ = value;
}
inline void P2PMatchingReport::set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_count(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.player_count)
}

// int32 peer_id = 4;
inline void P2PMatchingReport::clear_peer_id() {
  peer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_peer_id() const {
  return peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.peer_id)
  return _internal_peer_id();
}
inline void P2PMatchingReport::_internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peer_id_ = value;
}
inline void P2PMatchingReport::set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.peer_id)
}

// string close_reason = 5;
inline void P2PMatchingReport::clear_close_reason() {
  close_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatchingReport::close_reason() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.close_reason)
  return _internal_close_reason();
}
inline void P2PMatchingReport::set_close_reason(const std::string& value) {
  _internal_set_close_reason(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.close_reason)
}
inline std::string* P2PMatchingReport::mutable_close_reason() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatchingReport.close_reason)
  return _internal_mutable_close_reason();
}
inline const std::string& P2PMatchingReport::_internal_close_reason() const {
  return close_reason_.Get();
}
inline void P2PMatchingReport::_internal_set_close_reason(const std::string& value) {
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatchingReport::set_close_reason(std::string&& value) {
  
  close_reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatchingReport.close_reason)
}
inline void P2PMatchingReport::set_close_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatchingReport.close_reason)
}
inline void P2PMatchingReport::set_close_reason(const char* value,
    size_t size) {
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatchingReport.close_reason)
}
inline std::string* P2PMatchingReport::_internal_mutable_close_reason() {
  
  return close_reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatchingReport::release_close_reason() {
  // @@protoc_insertion_point(field_release:proto.P2PMatchingReport.close_reason)
  return close_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatchingReport::set_allocated_close_reason(std::string* close_reason) {
  if (close_reason != nullptr) {
    
  } else {
    
  }
  close_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatchingReport.close_reason)
}

// int32 frame_count = 6;
inline void P2PMatchingReport::clear_frame_count() {
  frame_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_frame_count() const {
  return frame_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::frame_count() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.frame_count)
  return _internal_frame_count();
}
inline void P2PMatchingReport::_internal_set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  frame_count_ = value;
}
inline void P2PMatchingReport::set_frame_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frame_count(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.frame_count)
}

// int32 disconnected_peer_id = 7;
inline void P2PMatchingReport::clear_disconnected_peer_id() {
  disconnected_peer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_disconnected_peer_id() const {
  return disconnected_peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::disconnected_peer_id() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.disconnected_peer_id)
  return _internal_disconnected_peer_id();
}
inline void P2PMatchingReport::_internal_set_disconnected_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disconnected_peer_id_ = value;
}
inline void P2PMatchingReport::set_disconnected_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disconnected_peer_id(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.disconnected_peer_id)
}

// string after_log = 11;
inline void P2PMatchingReport::clear_after_log() {
  after_log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatchingReport::after_log() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.after_log)
  return _internal_after_log();
}
inline void P2PMatchingReport::set_after_log(const std::string& value) {
  _internal_set_after_log(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.after_log)
}
inline std::string* P2PMatchingReport::mutable_after_log() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatchingReport.after_log)
  return _internal_mutable_after_log();
}
inline const std::string& P2PMatchingReport::_internal_after_log() const {
  return after_log_.Get();
}
inline void P2PMatchingReport::_internal_set_after_log(const std::string& value) {
  
  after_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatchingReport::set_after_log(std::string&& value) {
  
  after_log_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatchingReport.after_log)
}
inline void P2PMatchingReport::set_after_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  after_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatchingReport.after_log)
}
inline void P2PMatchingReport::set_after_log(const char* value,
    size_t size) {
  
  after_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatchingReport.after_log)
}
inline std::string* P2PMatchingReport::_internal_mutable_after_log() {
  
  return after_log_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatchingReport::release_after_log() {
  // @@protoc_insertion_point(field_release:proto.P2PMatchingReport.after_log)
  return after_log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatchingReport::set_allocated_after_log(std::string* after_log) {
  if (after_log != nullptr) {
    
  } else {
    
  }
  after_log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), after_log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatchingReport.after_log)
}

// string before_log = 12;
inline void P2PMatchingReport::clear_before_log() {
  before_log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatchingReport::before_log() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.before_log)
  return _internal_before_log();
}
inline void P2PMatchingReport::set_before_log(const std::string& value) {
  _internal_set_before_log(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.before_log)
}
inline std::string* P2PMatchingReport::mutable_before_log() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatchingReport.before_log)
  return _internal_mutable_before_log();
}
inline const std::string& P2PMatchingReport::_internal_before_log() const {
  return before_log_.Get();
}
inline void P2PMatchingReport::_internal_set_before_log(const std::string& value) {
  
  before_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatchingReport::set_before_log(std::string&& value) {
  
  before_log_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatchingReport.before_log)
}
inline void P2PMatchingReport::set_before_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  before_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatchingReport.before_log)
}
inline void P2PMatchingReport::set_before_log(const char* value,
    size_t size) {
  
  before_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatchingReport.before_log)
}
inline std::string* P2PMatchingReport::_internal_mutable_before_log() {
  
  return before_log_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatchingReport::release_before_log() {
  // @@protoc_insertion_point(field_release:proto.P2PMatchingReport.before_log)
  return before_log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatchingReport::set_allocated_before_log(std::string* before_log) {
  if (before_log != nullptr) {
    
  } else {
    
  }
  before_log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), before_log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatchingReport.before_log)
}

// repeated float fps_history = 15;
inline int P2PMatchingReport::_internal_fps_history_size() const {
  return fps_history_.size();
}
inline int P2PMatchingReport::fps_history_size() const {
  return _internal_fps_history_size();
}
inline void P2PMatchingReport::clear_fps_history() {
  fps_history_.Clear();
}
inline float P2PMatchingReport::_internal_fps_history(int index) const {
  return fps_history_.Get(index);
}
inline float P2PMatchingReport::fps_history(int index) const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.fps_history)
  return _internal_fps_history(index);
}
inline void P2PMatchingReport::set_fps_history(int index, float value) {
  fps_history_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.fps_history)
}
inline void P2PMatchingReport::_internal_add_fps_history(float value) {
  fps_history_.Add(value);
}
inline void P2PMatchingReport::add_fps_history(float value) {
  _internal_add_fps_history(value);
  // @@protoc_insertion_point(field_add:proto.P2PMatchingReport.fps_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
P2PMatchingReport::_internal_fps_history() const {
  return fps_history_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
P2PMatchingReport::fps_history() const {
  // @@protoc_insertion_point(field_list:proto.P2PMatchingReport.fps_history)
  return _internal_fps_history();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
P2PMatchingReport::_internal_mutable_fps_history() {
  return &fps_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
P2PMatchingReport::mutable_fps_history() {
  // @@protoc_insertion_point(field_mutable_list:proto.P2PMatchingReport.fps_history)
  return _internal_mutable_fps_history();
}

// int32 total_timesync = 16;
inline void P2PMatchingReport::clear_total_timesync() {
  total_timesync_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_total_timesync() const {
  return total_timesync_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::total_timesync() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.total_timesync)
  return _internal_total_timesync();
}
inline void P2PMatchingReport::_internal_set_total_timesync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_timesync_ = value;
}
inline void P2PMatchingReport::set_total_timesync(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_timesync(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.total_timesync)
}

// int32 input_block_count_0 = 17;
inline void P2PMatchingReport::clear_input_block_count_0() {
  input_block_count_0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_input_block_count_0() const {
  return input_block_count_0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::input_block_count_0() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.input_block_count_0)
  return _internal_input_block_count_0();
}
inline void P2PMatchingReport::_internal_set_input_block_count_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  input_block_count_0_ = value;
}
inline void P2PMatchingReport::set_input_block_count_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_block_count_0(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.input_block_count_0)
}

// int32 input_block_count_1 = 18;
inline void P2PMatchingReport::clear_input_block_count_1() {
  input_block_count_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_input_block_count_1() const {
  return input_block_count_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::input_block_count_1() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.input_block_count_1)
  return _internal_input_block_count_1();
}
inline void P2PMatchingReport::_internal_set_input_block_count_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  input_block_count_1_ = value;
}
inline void P2PMatchingReport::set_input_block_count_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_block_count_1(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.input_block_count_1)
}

// int32 input_block_count_2 = 19;
inline void P2PMatchingReport::clear_input_block_count_2() {
  input_block_count_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::_internal_input_block_count_2() const {
  return input_block_count_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatchingReport::input_block_count_2() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatchingReport.input_block_count_2)
  return _internal_input_block_count_2();
}
inline void P2PMatchingReport::_internal_set_input_block_count_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  input_block_count_2_ = value;
}
inline void P2PMatchingReport::set_input_block_count_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input_block_count_2(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatchingReport.input_block_count_2)
}

// -------------------------------------------------------------------

// P2PMatching

// string battle_code = 1;
inline void P2PMatching::clear_battle_code() {
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatching::battle_code() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.battle_code)
  return _internal_battle_code();
}
inline void P2PMatching::set_battle_code(const std::string& value) {
  _internal_set_battle_code(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.battle_code)
}
inline std::string* P2PMatching::mutable_battle_code() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatching.battle_code)
  return _internal_mutable_battle_code();
}
inline const std::string& P2PMatching::_internal_battle_code() const {
  return battle_code_.Get();
}
inline void P2PMatching::_internal_set_battle_code(const std::string& value) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatching::set_battle_code(std::string&& value) {
  
  battle_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatching.battle_code)
}
inline void P2PMatching::set_battle_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatching.battle_code)
}
inline void P2PMatching::set_battle_code(const char* value,
    size_t size) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatching.battle_code)
}
inline std::string* P2PMatching::_internal_mutable_battle_code() {
  
  return battle_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatching::release_battle_code() {
  // @@protoc_insertion_point(field_release:proto.P2PMatching.battle_code)
  return battle_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatching::set_allocated_battle_code(std::string* battle_code) {
  if (battle_code != nullptr) {
    
  } else {
    
  }
  battle_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatching.battle_code)
}

// int32 session_id = 2;
inline void P2PMatching::clear_session_id() {
  session_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::session_id() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.session_id)
  return _internal_session_id();
}
inline void P2PMatching::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_id_ = value;
}
inline void P2PMatching::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.session_id)
}

// int32 player_count = 3;
inline void P2PMatching::clear_player_count() {
  player_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::_internal_player_count() const {
  return player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::player_count() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.player_count)
  return _internal_player_count();
}
inline void P2PMatching::_internal_set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_count_ = value;
}
inline void P2PMatching::set_player_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_count(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.player_count)
}

// int32 peer_id = 4;
inline void P2PMatching::clear_peer_id() {
  peer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::_internal_peer_id() const {
  return peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.peer_id)
  return _internal_peer_id();
}
inline void P2PMatching::_internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peer_id_ = value;
}
inline void P2PMatching::set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.peer_id)
}

// int32 ping_test_duration = 6;
inline void P2PMatching::clear_ping_test_duration() {
  ping_test_duration_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::_internal_ping_test_duration() const {
  return ping_test_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 P2PMatching::ping_test_duration() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.ping_test_duration)
  return _internal_ping_test_duration();
}
inline void P2PMatching::_internal_set_ping_test_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ping_test_duration_ = value;
}
inline void P2PMatching::set_ping_test_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ping_test_duration(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.ping_test_duration)
}

// bool is_training_game = 7;
inline void P2PMatching::clear_is_training_game() {
  is_training_game_ = false;
}
inline bool P2PMatching::_internal_is_training_game() const {
  return is_training_game_;
}
inline bool P2PMatching::is_training_game() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.is_training_game)
  return _internal_is_training_game();
}
inline void P2PMatching::_internal_set_is_training_game(bool value) {
  
  is_training_game_ = value;
}
inline void P2PMatching::set_is_training_game(bool value) {
  _internal_set_is_training_game(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.is_training_game)
}

// bytes rule_bin = 8;
inline void P2PMatching::clear_rule_bin() {
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& P2PMatching::rule_bin() const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.rule_bin)
  return _internal_rule_bin();
}
inline void P2PMatching::set_rule_bin(const std::string& value) {
  _internal_set_rule_bin(value);
  // @@protoc_insertion_point(field_set:proto.P2PMatching.rule_bin)
}
inline std::string* P2PMatching::mutable_rule_bin() {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatching.rule_bin)
  return _internal_mutable_rule_bin();
}
inline const std::string& P2PMatching::_internal_rule_bin() const {
  return rule_bin_.Get();
}
inline void P2PMatching::_internal_set_rule_bin(const std::string& value) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void P2PMatching::set_rule_bin(std::string&& value) {
  
  rule_bin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.P2PMatching.rule_bin)
}
inline void P2PMatching::set_rule_bin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.P2PMatching.rule_bin)
}
inline void P2PMatching::set_rule_bin(const void* value,
    size_t size) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.P2PMatching.rule_bin)
}
inline std::string* P2PMatching::_internal_mutable_rule_bin() {
  
  return rule_bin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* P2PMatching::release_rule_bin() {
  // @@protoc_insertion_point(field_release:proto.P2PMatching.rule_bin)
  return rule_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void P2PMatching::set_allocated_rule_bin(std::string* rule_bin) {
  if (rule_bin != nullptr) {
    
  } else {
    
  }
  rule_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_bin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.P2PMatching.rule_bin)
}

// repeated .proto.BattleLogUser users = 9;
inline int P2PMatching::_internal_users_size() const {
  return users_.size();
}
inline int P2PMatching::users_size() const {
  return _internal_users_size();
}
inline void P2PMatching::clear_users() {
  users_.Clear();
}
inline ::proto::BattleLogUser* P2PMatching::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatching.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
P2PMatching::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.P2PMatching.users)
  return &users_;
}
inline const ::proto::BattleLogUser& P2PMatching::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::proto::BattleLogUser& P2PMatching::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.users)
  return _internal_users(index);
}
inline ::proto::BattleLogUser* P2PMatching::_internal_add_users() {
  return users_.Add();
}
inline ::proto::BattleLogUser* P2PMatching::add_users() {
  // @@protoc_insertion_point(field_add:proto.P2PMatching.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
P2PMatching::users() const {
  // @@protoc_insertion_point(field_list:proto.P2PMatching.users)
  return users_;
}

// repeated .proto.PlayerAddress candidates = 10;
inline int P2PMatching::_internal_candidates_size() const {
  return candidates_.size();
}
inline int P2PMatching::candidates_size() const {
  return _internal_candidates_size();
}
inline void P2PMatching::clear_candidates() {
  candidates_.Clear();
}
inline ::proto::PlayerAddress* P2PMatching::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:proto.P2PMatching.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PlayerAddress >*
P2PMatching::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:proto.P2PMatching.candidates)
  return &candidates_;
}
inline const ::proto::PlayerAddress& P2PMatching::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::proto::PlayerAddress& P2PMatching::candidates(int index) const {
  // @@protoc_insertion_point(field_get:proto.P2PMatching.candidates)
  return _internal_candidates(index);
}
inline ::proto::PlayerAddress* P2PMatching::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::proto::PlayerAddress* P2PMatching::add_candidates() {
  // @@protoc_insertion_point(field_add:proto.P2PMatching.candidates)
  return _internal_add_candidates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PlayerAddress >&
P2PMatching::candidates() const {
  // @@protoc_insertion_point(field_list:proto.P2PMatching.candidates)
  return candidates_;
}

// -------------------------------------------------------------------

// PlayerAddress

// string user_id = 1;
inline void PlayerAddress::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerAddress::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerAddress.user_id)
  return _internal_user_id();
}
inline void PlayerAddress::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.PlayerAddress.user_id)
}
inline std::string* PlayerAddress::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.PlayerAddress.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PlayerAddress::_internal_user_id() const {
  return user_id_.Get();
}
inline void PlayerAddress::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerAddress::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PlayerAddress.user_id)
}
inline void PlayerAddress::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PlayerAddress.user_id)
}
inline void PlayerAddress::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PlayerAddress.user_id)
}
inline std::string* PlayerAddress::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerAddress::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.PlayerAddress.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerAddress::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerAddress.user_id)
}

// int32 peer_id = 2;
inline void PlayerAddress::clear_peer_id() {
  peer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::_internal_peer_id() const {
  return peer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::peer_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerAddress.peer_id)
  return _internal_peer_id();
}
inline void PlayerAddress::_internal_set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  peer_id_ = value;
}
inline void PlayerAddress::set_peer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peer_id(value);
  // @@protoc_insertion_point(field_set:proto.PlayerAddress.peer_id)
}

// string ip = 3;
inline void PlayerAddress::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayerAddress::ip() const {
  // @@protoc_insertion_point(field_get:proto.PlayerAddress.ip)
  return _internal_ip();
}
inline void PlayerAddress::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:proto.PlayerAddress.ip)
}
inline std::string* PlayerAddress::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:proto.PlayerAddress.ip)
  return _internal_mutable_ip();
}
inline const std::string& PlayerAddress::_internal_ip() const {
  return ip_.Get();
}
inline void PlayerAddress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayerAddress::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PlayerAddress.ip)
}
inline void PlayerAddress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PlayerAddress.ip)
}
inline void PlayerAddress::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PlayerAddress.ip)
}
inline std::string* PlayerAddress::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayerAddress::release_ip() {
  // @@protoc_insertion_point(field_release:proto.PlayerAddress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayerAddress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerAddress.ip)
}

// int32 port = 4;
inline void PlayerAddress::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::port() const {
  // @@protoc_insertion_point(field_get:proto.PlayerAddress.port)
  return _internal_port();
}
inline void PlayerAddress::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void PlayerAddress::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:proto.PlayerAddress.port)
}

// int32 team = 5;
inline void PlayerAddress::clear_team() {
  team_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::_internal_team() const {
  return team_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerAddress::team() const {
  // @@protoc_insertion_point(field_get:proto.PlayerAddress.team)
  return _internal_team();
}
inline void PlayerAddress::_internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_ = value;
}
inline void PlayerAddress::set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:proto.PlayerAddress.team)
}

// -------------------------------------------------------------------

// GamePatch

// string game_disk = 1;
inline void GamePatch::clear_game_disk() {
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GamePatch::game_disk() const {
  // @@protoc_insertion_point(field_get:proto.GamePatch.game_disk)
  return _internal_game_disk();
}
inline void GamePatch::set_game_disk(const std::string& value) {
  _internal_set_game_disk(value);
  // @@protoc_insertion_point(field_set:proto.GamePatch.game_disk)
}
inline std::string* GamePatch::mutable_game_disk() {
  // @@protoc_insertion_point(field_mutable:proto.GamePatch.game_disk)
  return _internal_mutable_game_disk();
}
inline const std::string& GamePatch::_internal_game_disk() const {
  return game_disk_.Get();
}
inline void GamePatch::_internal_set_game_disk(const std::string& value) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePatch::set_game_disk(std::string&& value) {
  
  game_disk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.GamePatch.game_disk)
}
inline void GamePatch::set_game_disk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.GamePatch.game_disk)
}
inline void GamePatch::set_game_disk(const char* value,
    size_t size) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.GamePatch.game_disk)
}
inline std::string* GamePatch::_internal_mutable_game_disk() {
  
  return game_disk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePatch::release_game_disk() {
  // @@protoc_insertion_point(field_release:proto.GamePatch.game_disk)
  return game_disk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePatch::set_allocated_game_disk(std::string* game_disk) {
  if (game_disk != nullptr) {
    
  } else {
    
  }
  game_disk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_disk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.GamePatch.game_disk)
}

// string name = 2;
inline void GamePatch::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GamePatch::name() const {
  // @@protoc_insertion_point(field_get:proto.GamePatch.name)
  return _internal_name();
}
inline void GamePatch::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.GamePatch.name)
}
inline std::string* GamePatch::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.GamePatch.name)
  return _internal_mutable_name();
}
inline const std::string& GamePatch::_internal_name() const {
  return name_.Get();
}
inline void GamePatch::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GamePatch::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.GamePatch.name)
}
inline void GamePatch::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.GamePatch.name)
}
inline void GamePatch::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.GamePatch.name)
}
inline std::string* GamePatch::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GamePatch::release_name() {
  // @@protoc_insertion_point(field_release:proto.GamePatch.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GamePatch::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.GamePatch.name)
}

// bool write_once = 4;
inline void GamePatch::clear_write_once() {
  write_once_ = false;
}
inline bool GamePatch::_internal_write_once() const {
  return write_once_;
}
inline bool GamePatch::write_once() const {
  // @@protoc_insertion_point(field_get:proto.GamePatch.write_once)
  return _internal_write_once();
}
inline void GamePatch::_internal_set_write_once(bool value) {
  
  write_once_ = value;
}
inline void GamePatch::set_write_once(bool value) {
  _internal_set_write_once(value);
  // @@protoc_insertion_point(field_set:proto.GamePatch.write_once)
}

// repeated .proto.GamePatchCode codes = 10;
inline int GamePatch::_internal_codes_size() const {
  return codes_.size();
}
inline int GamePatch::codes_size() const {
  return _internal_codes_size();
}
inline void GamePatch::clear_codes() {
  codes_.Clear();
}
inline ::proto::GamePatchCode* GamePatch::mutable_codes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GamePatch.codes)
  return codes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatchCode >*
GamePatch::mutable_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.GamePatch.codes)
  return &codes_;
}
inline const ::proto::GamePatchCode& GamePatch::_internal_codes(int index) const {
  return codes_.Get(index);
}
inline const ::proto::GamePatchCode& GamePatch::codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.GamePatch.codes)
  return _internal_codes(index);
}
inline ::proto::GamePatchCode* GamePatch::_internal_add_codes() {
  return codes_.Add();
}
inline ::proto::GamePatchCode* GamePatch::add_codes() {
  // @@protoc_insertion_point(field_add:proto.GamePatch.codes)
  return _internal_add_codes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatchCode >&
GamePatch::codes() const {
  // @@protoc_insertion_point(field_list:proto.GamePatch.codes)
  return codes_;
}

// -------------------------------------------------------------------

// GamePatchCode

// int32 size = 1;
inline void GamePatchCode::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePatchCode::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GamePatchCode::size() const {
  // @@protoc_insertion_point(field_get:proto.GamePatchCode.size)
  return _internal_size();
}
inline void GamePatchCode::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void GamePatchCode::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.GamePatchCode.size)
}

// uint32 address = 2;
inline void GamePatchCode::clear_address() {
  address_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::address() const {
  // @@protoc_insertion_point(field_get:proto.GamePatchCode.address)
  return _internal_address();
}
inline void GamePatchCode::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  address_ = value;
}
inline void GamePatchCode::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:proto.GamePatchCode.address)
}

// uint32 original = 3;
inline void GamePatchCode::clear_original() {
  original_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::_internal_original() const {
  return original_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::original() const {
  // @@protoc_insertion_point(field_get:proto.GamePatchCode.original)
  return _internal_original();
}
inline void GamePatchCode::_internal_set_original(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  original_ = value;
}
inline void GamePatchCode::set_original(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_original(value);
  // @@protoc_insertion_point(field_set:proto.GamePatchCode.original)
}

// uint32 changed = 4;
inline void GamePatchCode::clear_changed() {
  changed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::_internal_changed() const {
  return changed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GamePatchCode::changed() const {
  // @@protoc_insertion_point(field_get:proto.GamePatchCode.changed)
  return _internal_changed();
}
inline void GamePatchCode::_internal_set_changed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  changed_ = value;
}
inline void GamePatchCode::set_changed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_changed(value);
  // @@protoc_insertion_point(field_set:proto.GamePatchCode.changed)
}

// -------------------------------------------------------------------

// GamePatchList

// repeated .proto.GamePatch patches = 1;
inline int GamePatchList::_internal_patches_size() const {
  return patches_.size();
}
inline int GamePatchList::patches_size() const {
  return _internal_patches_size();
}
inline void GamePatchList::clear_patches() {
  patches_.Clear();
}
inline ::proto::GamePatch* GamePatchList::mutable_patches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GamePatchList.patches)
  return patches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >*
GamePatchList::mutable_patches() {
  // @@protoc_insertion_point(field_mutable_list:proto.GamePatchList.patches)
  return &patches_;
}
inline const ::proto::GamePatch& GamePatchList::_internal_patches(int index) const {
  return patches_.Get(index);
}
inline const ::proto::GamePatch& GamePatchList::patches(int index) const {
  // @@protoc_insertion_point(field_get:proto.GamePatchList.patches)
  return _internal_patches(index);
}
inline ::proto::GamePatch* GamePatchList::_internal_add_patches() {
  return patches_.Add();
}
inline ::proto::GamePatch* GamePatchList::add_patches() {
  // @@protoc_insertion_point(field_add:proto.GamePatchList.patches)
  return _internal_add_patches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >&
GamePatchList::patches() const {
  // @@protoc_insertion_point(field_list:proto.GamePatchList.patches)
  return patches_;
}

// -------------------------------------------------------------------

// BattleLogUser

// string user_id = 1;
inline void BattleLogUser::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::user_id() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.user_id)
  return _internal_user_id();
}
inline void BattleLogUser::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.user_id)
}
inline std::string* BattleLogUser::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& BattleLogUser::_internal_user_id() const {
  return user_id_.Get();
}
inline void BattleLogUser::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.user_id)
}
inline void BattleLogUser::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.user_id)
}
inline void BattleLogUser::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.user_id)
}
inline std::string* BattleLogUser::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.user_id)
}

// string user_name = 2;
inline void BattleLogUser::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::user_name() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.user_name)
  return _internal_user_name();
}
inline void BattleLogUser::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.user_name)
}
inline std::string* BattleLogUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& BattleLogUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void BattleLogUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.user_name)
}
inline void BattleLogUser::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.user_name)
}
inline void BattleLogUser::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.user_name)
}
inline std::string* BattleLogUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.user_name)
}

// string pilot_name = 3;
inline void BattleLogUser::clear_pilot_name() {
  pilot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::pilot_name() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.pilot_name)
  return _internal_pilot_name();
}
inline void BattleLogUser::set_pilot_name(const std::string& value) {
  _internal_set_pilot_name(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.pilot_name)
}
inline std::string* BattleLogUser::mutable_pilot_name() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.pilot_name)
  return _internal_mutable_pilot_name();
}
inline const std::string& BattleLogUser::_internal_pilot_name() const {
  return pilot_name_.Get();
}
inline void BattleLogUser::_internal_set_pilot_name(const std::string& value) {
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_pilot_name(std::string&& value) {
  
  pilot_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.pilot_name)
}
inline void BattleLogUser::set_pilot_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.pilot_name)
}
inline void BattleLogUser::set_pilot_name(const char* value,
    size_t size) {
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.pilot_name)
}
inline std::string* BattleLogUser::_internal_mutable_pilot_name() {
  
  return pilot_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_pilot_name() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.pilot_name)
  return pilot_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_pilot_name(std::string* pilot_name) {
  if (pilot_name != nullptr) {
    
  } else {
    
  }
  pilot_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pilot_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.pilot_name)
}

// bytes game_param = 4;
inline void BattleLogUser::clear_game_param() {
  game_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::game_param() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.game_param)
  return _internal_game_param();
}
inline void BattleLogUser::set_game_param(const std::string& value) {
  _internal_set_game_param(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.game_param)
}
inline std::string* BattleLogUser::mutable_game_param() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.game_param)
  return _internal_mutable_game_param();
}
inline const std::string& BattleLogUser::_internal_game_param() const {
  return game_param_.Get();
}
inline void BattleLogUser::_internal_set_game_param(const std::string& value) {
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_game_param(std::string&& value) {
  
  game_param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.game_param)
}
inline void BattleLogUser::set_game_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.game_param)
}
inline void BattleLogUser::set_game_param(const void* value,
    size_t size) {
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.game_param)
}
inline std::string* BattleLogUser::_internal_mutable_game_param() {
  
  return game_param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_game_param() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.game_param)
  return game_param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_game_param(std::string* game_param) {
  if (game_param != nullptr) {
    
  } else {
    
  }
  game_param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.game_param)
}

// int32 battle_count = 5;
inline void BattleLogUser::clear_battle_count() {
  battle_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_battle_count() const {
  return battle_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::battle_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.battle_count)
  return _internal_battle_count();
}
inline void BattleLogUser::_internal_set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battle_count_ = value;
}
inline void BattleLogUser::set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battle_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.battle_count)
}

// int32 win_count = 6;
inline void BattleLogUser::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::win_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.win_count)
  return _internal_win_count();
}
inline void BattleLogUser::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void BattleLogUser::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.win_count)
}

// int32 lose_count = 7;
inline void BattleLogUser::clear_lose_count() {
  lose_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_lose_count() const {
  return lose_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::lose_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.lose_count)
  return _internal_lose_count();
}
inline void BattleLogUser::_internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_count_ = value;
}
inline void BattleLogUser::set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.lose_count)
}

// int32 grade = 8;
inline void BattleLogUser::clear_grade() {
  grade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_grade() const {
  return grade_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::grade() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.grade)
  return _internal_grade();
}
inline void BattleLogUser::_internal_set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  grade_ = value;
}
inline void BattleLogUser::set_grade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_grade(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.grade)
}

// int32 team = 9;
inline void BattleLogUser::clear_team() {
  team_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_team() const {
  return team_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::team() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.team)
  return _internal_team();
}
inline void BattleLogUser::_internal_set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_ = value;
}
inline void BattleLogUser::set_team(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.team)
}

// string platform = 10;
inline void BattleLogUser::clear_platform() {
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::platform() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.platform)
  return _internal_platform();
}
inline void BattleLogUser::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.platform)
}
inline std::string* BattleLogUser::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.platform)
  return _internal_mutable_platform();
}
inline const std::string& BattleLogUser::_internal_platform() const {
  return platform_.Get();
}
inline void BattleLogUser::_internal_set_platform(const std::string& value) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_platform(std::string&& value) {
  
  platform_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.platform)
}
inline void BattleLogUser::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.platform)
}
inline void BattleLogUser::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.platform)
}
inline std::string* BattleLogUser::_internal_mutable_platform() {
  
  return platform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_platform() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.platform)
}

// bytes user_name_sjis = 11;
inline void BattleLogUser::clear_user_name_sjis() {
  user_name_sjis_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::user_name_sjis() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.user_name_sjis)
  return _internal_user_name_sjis();
}
inline void BattleLogUser::set_user_name_sjis(const std::string& value) {
  _internal_set_user_name_sjis(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.user_name_sjis)
}
inline std::string* BattleLogUser::mutable_user_name_sjis() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.user_name_sjis)
  return _internal_mutable_user_name_sjis();
}
inline const std::string& BattleLogUser::_internal_user_name_sjis() const {
  return user_name_sjis_.Get();
}
inline void BattleLogUser::_internal_set_user_name_sjis(const std::string& value) {
  
  user_name_sjis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_user_name_sjis(std::string&& value) {
  
  user_name_sjis_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.user_name_sjis)
}
inline void BattleLogUser::set_user_name_sjis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_sjis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.user_name_sjis)
}
inline void BattleLogUser::set_user_name_sjis(const void* value,
    size_t size) {
  
  user_name_sjis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.user_name_sjis)
}
inline std::string* BattleLogUser::_internal_mutable_user_name_sjis() {
  
  return user_name_sjis_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_user_name_sjis() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.user_name_sjis)
  return user_name_sjis_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_user_name_sjis(std::string* user_name_sjis) {
  if (user_name_sjis != nullptr) {
    
  } else {
    
  }
  user_name_sjis_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name_sjis,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.user_name_sjis)
}

// int32 pos = 12;
inline void BattleLogUser::clear_pos() {
  pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_pos() const {
  return pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::pos() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.pos)
  return _internal_pos();
}
inline void BattleLogUser::_internal_set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_ = value;
}
inline void BattleLogUser::set_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.pos)
}

// -------------------------------------------------------------------

// BattleLogFile

// string game_disk = 5;
inline void BattleLogFile::clear_game_disk() {
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::game_disk() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.game_disk)
  return _internal_game_disk();
}
inline void BattleLogFile::set_game_disk(const std::string& value) {
  _internal_set_game_disk(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.game_disk)
}
inline std::string* BattleLogFile::mutable_game_disk() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.game_disk)
  return _internal_mutable_game_disk();
}
inline const std::string& BattleLogFile::_internal_game_disk() const {
  return game_disk_.Get();
}
inline void BattleLogFile::_internal_set_game_disk(const std::string& value) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_game_disk(std::string&& value) {
  
  game_disk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.game_disk)
}
inline void BattleLogFile::set_game_disk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.game_disk)
}
inline void BattleLogFile::set_game_disk(const char* value,
    size_t size) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.game_disk)
}
inline std::string* BattleLogFile::_internal_mutable_game_disk() {
  
  return game_disk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_game_disk() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.game_disk)
  return game_disk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_game_disk(std::string* game_disk) {
  if (game_disk != nullptr) {
    
  } else {
    
  }
  game_disk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_disk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.game_disk)
}

// string gdxsv_version_deprecated = 2;
inline void BattleLogFile::clear_gdxsv_version_deprecated() {
  gdxsv_version_deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::gdxsv_version_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.gdxsv_version_deprecated)
  return _internal_gdxsv_version_deprecated();
}
inline void BattleLogFile::set_gdxsv_version_deprecated(const std::string& value) {
  _internal_set_gdxsv_version_deprecated(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.gdxsv_version_deprecated)
}
inline std::string* BattleLogFile::mutable_gdxsv_version_deprecated() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.gdxsv_version_deprecated)
  return _internal_mutable_gdxsv_version_deprecated();
}
inline const std::string& BattleLogFile::_internal_gdxsv_version_deprecated() const {
  return gdxsv_version_deprecated_.Get();
}
inline void BattleLogFile::_internal_set_gdxsv_version_deprecated(const std::string& value) {
  
  gdxsv_version_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_gdxsv_version_deprecated(std::string&& value) {
  
  gdxsv_version_deprecated_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.gdxsv_version_deprecated)
}
inline void BattleLogFile::set_gdxsv_version_deprecated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gdxsv_version_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.gdxsv_version_deprecated)
}
inline void BattleLogFile::set_gdxsv_version_deprecated(const char* value,
    size_t size) {
  
  gdxsv_version_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.gdxsv_version_deprecated)
}
inline std::string* BattleLogFile::_internal_mutable_gdxsv_version_deprecated() {
  
  return gdxsv_version_deprecated_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_gdxsv_version_deprecated() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.gdxsv_version_deprecated)
  return gdxsv_version_deprecated_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_gdxsv_version_deprecated(std::string* gdxsv_version_deprecated) {
  if (gdxsv_version_deprecated != nullptr) {
    
  } else {
    
  }
  gdxsv_version_deprecated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gdxsv_version_deprecated,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.gdxsv_version_deprecated)
}

// string battle_code = 3;
inline void BattleLogFile::clear_battle_code() {
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::battle_code() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.battle_code)
  return _internal_battle_code();
}
inline void BattleLogFile::set_battle_code(const std::string& value) {
  _internal_set_battle_code(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.battle_code)
}
inline std::string* BattleLogFile::mutable_battle_code() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.battle_code)
  return _internal_mutable_battle_code();
}
inline const std::string& BattleLogFile::_internal_battle_code() const {
  return battle_code_.Get();
}
inline void BattleLogFile::_internal_set_battle_code(const std::string& value) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_battle_code(std::string&& value) {
  
  battle_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.battle_code)
}
inline void BattleLogFile::set_battle_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.battle_code)
}
inline void BattleLogFile::set_battle_code(const char* value,
    size_t size) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.battle_code)
}
inline std::string* BattleLogFile::_internal_mutable_battle_code() {
  
  return battle_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_battle_code() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.battle_code)
  return battle_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_battle_code(std::string* battle_code) {
  if (battle_code != nullptr) {
    
  } else {
    
  }
  battle_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.battle_code)
}

// int32 log_file_version = 4;
inline void BattleLogFile::clear_log_file_version() {
  log_file_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::_internal_log_file_version() const {
  return log_file_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::log_file_version() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.log_file_version)
  return _internal_log_file_version();
}
inline void BattleLogFile::_internal_set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_file_version_ = value;
}
inline void BattleLogFile::set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_file_version(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.log_file_version)
}

// repeated .proto.GamePatch patches = 7;
inline int BattleLogFile::_internal_patches_size() const {
  return patches_.size();
}
inline int BattleLogFile::patches_size() const {
  return _internal_patches_size();
}
inline void BattleLogFile::clear_patches() {
  patches_.Clear();
}
inline ::proto::GamePatch* BattleLogFile::mutable_patches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.patches)
  return patches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >*
BattleLogFile::mutable_patches() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.patches)
  return &patches_;
}
inline const ::proto::GamePatch& BattleLogFile::_internal_patches(int index) const {
  return patches_.Get(index);
}
inline const ::proto::GamePatch& BattleLogFile::patches(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.patches)
  return _internal_patches(index);
}
inline ::proto::GamePatch* BattleLogFile::_internal_add_patches() {
  return patches_.Add();
}
inline ::proto::GamePatch* BattleLogFile::add_patches() {
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.patches)
  return _internal_add_patches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::GamePatch >&
BattleLogFile::patches() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.patches)
  return patches_;
}

// bytes rule_bin = 10;
inline void BattleLogFile::clear_rule_bin() {
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::rule_bin() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.rule_bin)
  return _internal_rule_bin();
}
inline void BattleLogFile::set_rule_bin(const std::string& value) {
  _internal_set_rule_bin(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.rule_bin)
}
inline std::string* BattleLogFile::mutable_rule_bin() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.rule_bin)
  return _internal_mutable_rule_bin();
}
inline const std::string& BattleLogFile::_internal_rule_bin() const {
  return rule_bin_.Get();
}
inline void BattleLogFile::_internal_set_rule_bin(const std::string& value) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_rule_bin(std::string&& value) {
  
  rule_bin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.rule_bin)
}
inline void BattleLogFile::set_rule_bin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.rule_bin)
}
inline void BattleLogFile::set_rule_bin(const void* value,
    size_t size) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.rule_bin)
}
inline std::string* BattleLogFile::_internal_mutable_rule_bin() {
  
  return rule_bin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_rule_bin() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.rule_bin)
  return rule_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_rule_bin(std::string* rule_bin) {
  if (rule_bin != nullptr) {
    
  } else {
    
  }
  rule_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_bin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.rule_bin)
}

// repeated .proto.BattleLogUser users = 11;
inline int BattleLogFile::_internal_users_size() const {
  return users_.size();
}
inline int BattleLogFile::users_size() const {
  return _internal_users_size();
}
inline void BattleLogFile::clear_users() {
  users_.Clear();
}
inline ::proto::BattleLogUser* BattleLogFile::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
BattleLogFile::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.users)
  return &users_;
}
inline const ::proto::BattleLogUser& BattleLogFile::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::proto::BattleLogUser& BattleLogFile::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.users)
  return _internal_users(index);
}
inline ::proto::BattleLogUser* BattleLogFile::_internal_add_users() {
  return users_.Add();
}
inline ::proto::BattleLogUser* BattleLogFile::add_users() {
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
BattleLogFile::users() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.users)
  return users_;
}

// repeated .proto.BattleMessage battle_data = 12;
inline int BattleLogFile::_internal_battle_data_size() const {
  return battle_data_.size();
}
inline int BattleLogFile::battle_data_size() const {
  return _internal_battle_data_size();
}
inline void BattleLogFile::clear_battle_data() {
  battle_data_.Clear();
}
inline ::proto::BattleMessage* BattleLogFile::mutable_battle_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.battle_data)
  return battle_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
BattleLogFile::mutable_battle_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.battle_data)
  return &battle_data_;
}
inline const ::proto::BattleMessage& BattleLogFile::_internal_battle_data(int index) const {
  return battle_data_.Get(index);
}
inline const ::proto::BattleMessage& BattleLogFile::battle_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.battle_data)
  return _internal_battle_data(index);
}
inline ::proto::BattleMessage* BattleLogFile::_internal_add_battle_data() {
  return battle_data_.Add();
}
inline ::proto::BattleMessage* BattleLogFile::add_battle_data() {
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.battle_data)
  return _internal_add_battle_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
BattleLogFile::battle_data() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.battle_data)
  return battle_data_;
}

// repeated fixed64 inputs = 15;
inline int BattleLogFile::_internal_inputs_size() const {
  return inputs_.size();
}
inline int BattleLogFile::inputs_size() const {
  return _internal_inputs_size();
}
inline void BattleLogFile::clear_inputs() {
  inputs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleLogFile::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleLogFile::inputs(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.inputs)
  return _internal_inputs(index);
}
inline void BattleLogFile::set_inputs(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.inputs)
}
inline void BattleLogFile::_internal_add_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  inputs_.Add(value);
}
inline void BattleLogFile::add_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_inputs(value);
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BattleLogFile::_internal_inputs() const {
  return inputs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BattleLogFile::inputs() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.inputs)
  return _internal_inputs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BattleLogFile::_internal_mutable_inputs() {
  return &inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BattleLogFile::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.inputs)
  return _internal_mutable_inputs();
}

// repeated int32 start_msg_indexes = 16;
inline int BattleLogFile::_internal_start_msg_indexes_size() const {
  return start_msg_indexes_.size();
}
inline int BattleLogFile::start_msg_indexes_size() const {
  return _internal_start_msg_indexes_size();
}
inline void BattleLogFile::clear_start_msg_indexes() {
  start_msg_indexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::_internal_start_msg_indexes(int index) const {
  return start_msg_indexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::start_msg_indexes(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.start_msg_indexes)
  return _internal_start_msg_indexes(index);
}
inline void BattleLogFile::set_start_msg_indexes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  start_msg_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.start_msg_indexes)
}
inline void BattleLogFile::_internal_add_start_msg_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  start_msg_indexes_.Add(value);
}
inline void BattleLogFile::add_start_msg_indexes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_start_msg_indexes(value);
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.start_msg_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleLogFile::_internal_start_msg_indexes() const {
  return start_msg_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BattleLogFile::start_msg_indexes() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.start_msg_indexes)
  return _internal_start_msg_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleLogFile::_internal_mutable_start_msg_indexes() {
  return &start_msg_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BattleLogFile::mutable_start_msg_indexes() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.start_msg_indexes)
  return _internal_mutable_start_msg_indexes();
}

// repeated uint64 start_msg_randoms = 17;
inline int BattleLogFile::_internal_start_msg_randoms_size() const {
  return start_msg_randoms_.size();
}
inline int BattleLogFile::start_msg_randoms_size() const {
  return _internal_start_msg_randoms_size();
}
inline void BattleLogFile::clear_start_msg_randoms() {
  start_msg_randoms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleLogFile::_internal_start_msg_randoms(int index) const {
  return start_msg_randoms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BattleLogFile::start_msg_randoms(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.start_msg_randoms)
  return _internal_start_msg_randoms(index);
}
inline void BattleLogFile::set_start_msg_randoms(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  start_msg_randoms_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.start_msg_randoms)
}
inline void BattleLogFile::_internal_add_start_msg_randoms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  start_msg_randoms_.Add(value);
}
inline void BattleLogFile::add_start_msg_randoms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_start_msg_randoms(value);
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.start_msg_randoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BattleLogFile::_internal_start_msg_randoms() const {
  return start_msg_randoms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BattleLogFile::start_msg_randoms() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.start_msg_randoms)
  return _internal_start_msg_randoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BattleLogFile::_internal_mutable_start_msg_randoms() {
  return &start_msg_randoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BattleLogFile::mutable_start_msg_randoms() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.start_msg_randoms)
  return _internal_mutable_start_msg_randoms();
}

// int64 start_at = 20;
inline void BattleLogFile::clear_start_at() {
  start_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::_internal_start_at() const {
  return start_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::start_at() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.start_at)
  return _internal_start_at();
}
inline void BattleLogFile::_internal_set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_at_ = value;
}
inline void BattleLogFile::set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_at(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.start_at)
}

// int64 end_at = 21;
inline void BattleLogFile::clear_end_at() {
  end_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::_internal_end_at() const {
  return end_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::end_at() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.end_at)
  return _internal_end_at();
}
inline void BattleLogFile::_internal_set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_at_ = value;
}
inline void BattleLogFile::set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_at(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.end_at)
}

// string close_reason = 24;
inline void BattleLogFile::clear_close_reason() {
  close_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::close_reason() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.close_reason)
  return _internal_close_reason();
}
inline void BattleLogFile::set_close_reason(const std::string& value) {
  _internal_set_close_reason(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.close_reason)
}
inline std::string* BattleLogFile::mutable_close_reason() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.close_reason)
  return _internal_mutable_close_reason();
}
inline const std::string& BattleLogFile::_internal_close_reason() const {
  return close_reason_.Get();
}
inline void BattleLogFile::_internal_set_close_reason(const std::string& value) {
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_close_reason(std::string&& value) {
  
  close_reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.close_reason)
}
inline void BattleLogFile::set_close_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.close_reason)
}
inline void BattleLogFile::set_close_reason(const char* value,
    size_t size) {
  
  close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.close_reason)
}
inline std::string* BattleLogFile::_internal_mutable_close_reason() {
  
  return close_reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_close_reason() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.close_reason)
  return close_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_close_reason(std::string* close_reason) {
  if (close_reason != nullptr) {
    
  } else {
    
  }
  close_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.close_reason)
}

// int32 disconnect_user_index = 25;
inline void BattleLogFile::clear_disconnect_user_index() {
  disconnect_user_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::_internal_disconnect_user_index() const {
  return disconnect_user_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::disconnect_user_index() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.disconnect_user_index)
  return _internal_disconnect_user_index();
}
inline void BattleLogFile::_internal_set_disconnect_user_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disconnect_user_index_ = value;
}
inline void BattleLogFile::set_disconnect_user_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disconnect_user_index(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.disconnect_user_index)
}

// -------------------------------------------------------------------

// BattleMessage

// string user_id = 1;
inline void BattleMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.user_id)
  return _internal_user_id();
}
inline void BattleMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.user_id)
}
inline std::string* BattleMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.BattleMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& BattleMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void BattleMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleMessage.user_id)
}
inline void BattleMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleMessage.user_id)
}
inline void BattleMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleMessage.user_id)
}
inline std::string* BattleMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.BattleMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleMessage.user_id)
}

// uint32 seq = 2;
inline void BattleMessage::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMessage::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleMessage::seq() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.seq)
  return _internal_seq();
}
inline void BattleMessage::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void BattleMessage::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.seq)
}

// bytes body = 3;
inline void BattleMessage::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleMessage::body() const {
  // @@protoc_insertion_point(field_get:proto.BattleMessage.body)
  return _internal_body();
}
inline void BattleMessage::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:proto.BattleMessage.body)
}
inline std::string* BattleMessage::mutable_body() {
  // @@protoc_insertion_point(field_mutable:proto.BattleMessage.body)
  return _internal_mutable_body();
}
inline const std::string& BattleMessage::_internal_body() const {
  return body_.Get();
}
inline void BattleMessage::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleMessage::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleMessage.body)
}
inline void BattleMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleMessage.body)
}
inline void BattleMessage::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleMessage.body)
}
inline std::string* BattleMessage::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleMessage::release_body() {
  // @@protoc_insertion_point(field_release:proto.BattleMessage.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleMessage::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleMessage.body)
}

// -------------------------------------------------------------------

// PingMessage

// int64 timestamp = 1;
inline void PingMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PingMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PingMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.PingMessage.timestamp)
  return _internal_timestamp();
}
inline void PingMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PingMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.PingMessage.timestamp)
}

// string user_id = 2;
inline void PingMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PingMessage.user_id)
  return _internal_user_id();
}
inline void PingMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.PingMessage.user_id)
}
inline std::string* PingMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.PingMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PingMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void PingMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PingMessage.user_id)
}
inline void PingMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PingMessage.user_id)
}
inline void PingMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PingMessage.user_id)
}
inline std::string* PingMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.PingMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PingMessage.user_id)
}

// -------------------------------------------------------------------

// PongMessage

// int64 timestamp = 1;
inline void PongMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PongMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PongMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.timestamp)
  return _internal_timestamp();
}
inline void PongMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PongMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.timestamp)
}

// string user_id = 2;
inline void PongMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PongMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.user_id)
  return _internal_user_id();
}
inline void PongMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.user_id)
}
inline std::string* PongMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.PongMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PongMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void PongMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PongMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PongMessage.user_id)
}
inline void PongMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PongMessage.user_id)
}
inline void PongMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PongMessage.user_id)
}
inline std::string* PongMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PongMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.PongMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PongMessage.user_id)
}

// string public_addr = 3;
inline void PongMessage::clear_public_addr() {
  public_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PongMessage::public_addr() const {
  // @@protoc_insertion_point(field_get:proto.PongMessage.public_addr)
  return _internal_public_addr();
}
inline void PongMessage::set_public_addr(const std::string& value) {
  _internal_set_public_addr(value);
  // @@protoc_insertion_point(field_set:proto.PongMessage.public_addr)
}
inline std::string* PongMessage::mutable_public_addr() {
  // @@protoc_insertion_point(field_mutable:proto.PongMessage.public_addr)
  return _internal_mutable_public_addr();
}
inline const std::string& PongMessage::_internal_public_addr() const {
  return public_addr_.Get();
}
inline void PongMessage::_internal_set_public_addr(const std::string& value) {
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PongMessage::set_public_addr(std::string&& value) {
  
  public_addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.PongMessage.public_addr)
}
inline void PongMessage::set_public_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.PongMessage.public_addr)
}
inline void PongMessage::set_public_addr(const char* value,
    size_t size) {
  
  public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.PongMessage.public_addr)
}
inline std::string* PongMessage::_internal_mutable_public_addr() {
  
  return public_addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PongMessage::release_public_addr() {
  // @@protoc_insertion_point(field_release:proto.PongMessage.public_addr)
  return public_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PongMessage::set_allocated_public_addr(std::string* public_addr) {
  if (public_addr != nullptr) {
    
  } else {
    
  }
  public_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.PongMessage.public_addr)
}

// -------------------------------------------------------------------

// HelloServerMessage

// string session_id_deprecated = 1;
inline void HelloServerMessage::clear_session_id_deprecated() {
  session_id_deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloServerMessage::session_id_deprecated() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.session_id_deprecated)
  return _internal_session_id_deprecated();
}
inline void HelloServerMessage::set_session_id_deprecated(const std::string& value) {
  _internal_set_session_id_deprecated(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.session_id_deprecated)
}
inline std::string* HelloServerMessage::mutable_session_id_deprecated() {
  // @@protoc_insertion_point(field_mutable:proto.HelloServerMessage.session_id_deprecated)
  return _internal_mutable_session_id_deprecated();
}
inline const std::string& HelloServerMessage::_internal_session_id_deprecated() const {
  return session_id_deprecated_.Get();
}
inline void HelloServerMessage::_internal_set_session_id_deprecated(const std::string& value) {
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloServerMessage::set_session_id_deprecated(std::string&& value) {
  
  session_id_deprecated_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloServerMessage.session_id_deprecated)
}
inline void HelloServerMessage::set_session_id_deprecated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.HelloServerMessage.session_id_deprecated)
}
inline void HelloServerMessage::set_session_id_deprecated(const char* value,
    size_t size) {
  
  session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.HelloServerMessage.session_id_deprecated)
}
inline std::string* HelloServerMessage::_internal_mutable_session_id_deprecated() {
  
  return session_id_deprecated_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloServerMessage::release_session_id_deprecated() {
  // @@protoc_insertion_point(field_release:proto.HelloServerMessage.session_id_deprecated)
  return session_id_deprecated_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloServerMessage::set_allocated_session_id_deprecated(std::string* session_id_deprecated) {
  if (session_id_deprecated != nullptr) {
    
  } else {
    
  }
  session_id_deprecated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id_deprecated,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.HelloServerMessage.session_id_deprecated)
}

// bool ok = 2;
inline void HelloServerMessage::clear_ok() {
  ok_ = false;
}
inline bool HelloServerMessage::_internal_ok() const {
  return ok_;
}
inline bool HelloServerMessage::ok() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.ok)
  return _internal_ok();
}
inline void HelloServerMessage::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void HelloServerMessage::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.ok)
}

// string user_id = 3;
inline void HelloServerMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloServerMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.HelloServerMessage.user_id)
  return _internal_user_id();
}
inline void HelloServerMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.HelloServerMessage.user_id)
}
inline std::string* HelloServerMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.HelloServerMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& HelloServerMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void HelloServerMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloServerMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloServerMessage.user_id)
}
inline void HelloServerMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.HelloServerMessage.user_id)
}
inline void HelloServerMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.HelloServerMessage.user_id)
}
inline std::string* HelloServerMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloServerMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.HelloServerMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloServerMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.HelloServerMessage.user_id)
}

// -------------------------------------------------------------------

// FinMessage

// string detail = 1;
inline void FinMessage::clear_detail() {
  detail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FinMessage::detail() const {
  // @@protoc_insertion_point(field_get:proto.FinMessage.detail)
  return _internal_detail();
}
inline void FinMessage::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:proto.FinMessage.detail)
}
inline std::string* FinMessage::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:proto.FinMessage.detail)
  return _internal_mutable_detail();
}
inline const std::string& FinMessage::_internal_detail() const {
  return detail_.Get();
}
inline void FinMessage::_internal_set_detail(const std::string& value) {
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FinMessage::set_detail(std::string&& value) {
  
  detail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.FinMessage.detail)
}
inline void FinMessage::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.FinMessage.detail)
}
inline void FinMessage::set_detail(const char* value,
    size_t size) {
  
  detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.FinMessage.detail)
}
inline std::string* FinMessage::_internal_mutable_detail() {
  
  return detail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FinMessage::release_detail() {
  // @@protoc_insertion_point(field_release:proto.FinMessage.detail)
  return detail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FinMessage::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.FinMessage.detail)
}

// -------------------------------------------------------------------

// HelloLbsMessage

// string user_id = 1;
inline void HelloLbsMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HelloLbsMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.HelloLbsMessage.user_id)
  return _internal_user_id();
}
inline void HelloLbsMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.HelloLbsMessage.user_id)
}
inline std::string* HelloLbsMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.HelloLbsMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& HelloLbsMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void HelloLbsMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HelloLbsMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloLbsMessage.user_id)
}
inline void HelloLbsMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.HelloLbsMessage.user_id)
}
inline void HelloLbsMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.HelloLbsMessage.user_id)
}
inline std::string* HelloLbsMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HelloLbsMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.HelloLbsMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloLbsMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.HelloLbsMessage.user_id)
}

// -------------------------------------------------------------------

// Packet

// .proto.MessageType type = 1;
inline void Packet::clear_type() {
  type_ = 0;
}
inline ::proto::MessageType Packet::_internal_type() const {
  return static_cast< ::proto::MessageType >(type_);
}
inline ::proto::MessageType Packet::type() const {
  // @@protoc_insertion_point(field_get:proto.Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::proto::MessageType value) {
  
  type_ = value;
}
inline void Packet::set_type(::proto::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.Packet.type)
}

// uint32 seq = 2;
inline void Packet::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::seq() const {
  // @@protoc_insertion_point(field_get:proto.Packet.seq)
  return _internal_seq();
}
inline void Packet::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void Packet::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:proto.Packet.seq)
}

// uint32 ack = 3;
inline void Packet::clear_ack() {
  ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Packet::ack() const {
  // @@protoc_insertion_point(field_get:proto.Packet.ack)
  return _internal_ack();
}
inline void Packet::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ack_ = value;
}
inline void Packet::set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:proto.Packet.ack)
}

// string session_id = 5;
inline void Packet::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Packet::session_id() const {
  // @@protoc_insertion_point(field_get:proto.Packet.session_id)
  return _internal_session_id();
}
inline void Packet::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:proto.Packet.session_id)
}
inline std::string* Packet::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& Packet::_internal_session_id() const {
  return session_id_.Get();
}
inline void Packet::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Packet::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Packet.session_id)
}
inline void Packet::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Packet.session_id)
}
inline void Packet::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Packet.session_id)
}
inline std::string* Packet::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Packet::release_session_id() {
  // @@protoc_insertion_point(field_release:proto.Packet.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Packet::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.session_id)
}

// .proto.HelloServerMessage hello_server_data = 10;
inline bool Packet::_internal_has_hello_server_data() const {
  return this != internal_default_instance() && hello_server_data_ != nullptr;
}
inline bool Packet::has_hello_server_data() const {
  return _internal_has_hello_server_data();
}
inline void Packet::clear_hello_server_data() {
  if (GetArena() == nullptr && hello_server_data_ != nullptr) {
    delete hello_server_data_;
  }
  hello_server_data_ = nullptr;
}
inline const ::proto::HelloServerMessage& Packet::_internal_hello_server_data() const {
  const ::proto::HelloServerMessage* p = hello_server_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::HelloServerMessage*>(
      &::proto::_HelloServerMessage_default_instance_);
}
inline const ::proto::HelloServerMessage& Packet::hello_server_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.hello_server_data)
  return _internal_hello_server_data();
}
inline void Packet::unsafe_arena_set_allocated_hello_server_data(
    ::proto::HelloServerMessage* hello_server_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hello_server_data_);
  }
  hello_server_data_ = hello_server_data;
  if (hello_server_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.hello_server_data)
}
inline ::proto::HelloServerMessage* Packet::release_hello_server_data() {
  
  ::proto::HelloServerMessage* temp = hello_server_data_;
  hello_server_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::HelloServerMessage* Packet::unsafe_arena_release_hello_server_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.hello_server_data)
  
  ::proto::HelloServerMessage* temp = hello_server_data_;
  hello_server_data_ = nullptr;
  return temp;
}
inline ::proto::HelloServerMessage* Packet::_internal_mutable_hello_server_data() {
  
  if (hello_server_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::HelloServerMessage>(GetArena());
    hello_server_data_ = p;
  }
  return hello_server_data_;
}
inline ::proto::HelloServerMessage* Packet::mutable_hello_server_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.hello_server_data)
  return _internal_mutable_hello_server_data();
}
inline void Packet::set_allocated_hello_server_data(::proto::HelloServerMessage* hello_server_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hello_server_data_;
  }
  if (hello_server_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hello_server_data);
    if (message_arena != submessage_arena) {
      hello_server_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello_server_data, submessage_arena);
    }
    
  } else {
    
  }
  hello_server_data_ = hello_server_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.hello_server_data)
}

// .proto.PingMessage ping_data = 11;
inline bool Packet::_internal_has_ping_data() const {
  return this != internal_default_instance() && ping_data_ != nullptr;
}
inline bool Packet::has_ping_data() const {
  return _internal_has_ping_data();
}
inline void Packet::clear_ping_data() {
  if (GetArena() == nullptr && ping_data_ != nullptr) {
    delete ping_data_;
  }
  ping_data_ = nullptr;
}
inline const ::proto::PingMessage& Packet::_internal_ping_data() const {
  const ::proto::PingMessage* p = ping_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::PingMessage*>(
      &::proto::_PingMessage_default_instance_);
}
inline const ::proto::PingMessage& Packet::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.ping_data)
  return _internal_ping_data();
}
inline void Packet::unsafe_arena_set_allocated_ping_data(
    ::proto::PingMessage* ping_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.ping_data)
}
inline ::proto::PingMessage* Packet::release_ping_data() {
  
  ::proto::PingMessage* temp = ping_data_;
  ping_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::PingMessage* Packet::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.ping_data)
  
  ::proto::PingMessage* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::proto::PingMessage* Packet::_internal_mutable_ping_data() {
  
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PingMessage>(GetArena());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::proto::PingMessage* Packet::mutable_ping_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.ping_data)
  return _internal_mutable_ping_data();
}
inline void Packet::set_allocated_ping_data(::proto::PingMessage* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_data_;
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping_data);
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    
  } else {
    
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.ping_data)
}

// .proto.PongMessage pong_data = 12;
inline bool Packet::_internal_has_pong_data() const {
  return this != internal_default_instance() && pong_data_ != nullptr;
}
inline bool Packet::has_pong_data() const {
  return _internal_has_pong_data();
}
inline void Packet::clear_pong_data() {
  if (GetArena() == nullptr && pong_data_ != nullptr) {
    delete pong_data_;
  }
  pong_data_ = nullptr;
}
inline const ::proto::PongMessage& Packet::_internal_pong_data() const {
  const ::proto::PongMessage* p = pong_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::PongMessage*>(
      &::proto::_PongMessage_default_instance_);
}
inline const ::proto::PongMessage& Packet::pong_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.pong_data)
  return _internal_pong_data();
}
inline void Packet::unsafe_arena_set_allocated_pong_data(
    ::proto::PongMessage* pong_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pong_data_);
  }
  pong_data_ = pong_data;
  if (pong_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.pong_data)
}
inline ::proto::PongMessage* Packet::release_pong_data() {
  
  ::proto::PongMessage* temp = pong_data_;
  pong_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::PongMessage* Packet::unsafe_arena_release_pong_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.pong_data)
  
  ::proto::PongMessage* temp = pong_data_;
  pong_data_ = nullptr;
  return temp;
}
inline ::proto::PongMessage* Packet::_internal_mutable_pong_data() {
  
  if (pong_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PongMessage>(GetArena());
    pong_data_ = p;
  }
  return pong_data_;
}
inline ::proto::PongMessage* Packet::mutable_pong_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.pong_data)
  return _internal_mutable_pong_data();
}
inline void Packet::set_allocated_pong_data(::proto::PongMessage* pong_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pong_data_;
  }
  if (pong_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pong_data);
    if (message_arena != submessage_arena) {
      pong_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong_data, submessage_arena);
    }
    
  } else {
    
  }
  pong_data_ = pong_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.pong_data)
}

// repeated .proto.BattleMessage battle_data = 13;
inline int Packet::_internal_battle_data_size() const {
  return battle_data_.size();
}
inline int Packet::battle_data_size() const {
  return _internal_battle_data_size();
}
inline void Packet::clear_battle_data() {
  battle_data_.Clear();
}
inline ::proto::BattleMessage* Packet::mutable_battle_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Packet.battle_data)
  return battle_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >*
Packet::mutable_battle_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.Packet.battle_data)
  return &battle_data_;
}
inline const ::proto::BattleMessage& Packet::_internal_battle_data(int index) const {
  return battle_data_.Get(index);
}
inline const ::proto::BattleMessage& Packet::battle_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.Packet.battle_data)
  return _internal_battle_data(index);
}
inline ::proto::BattleMessage* Packet::_internal_add_battle_data() {
  return battle_data_.Add();
}
inline ::proto::BattleMessage* Packet::add_battle_data() {
  // @@protoc_insertion_point(field_add:proto.Packet.battle_data)
  return _internal_add_battle_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleMessage >&
Packet::battle_data() const {
  // @@protoc_insertion_point(field_list:proto.Packet.battle_data)
  return battle_data_;
}

// .proto.FinMessage fin_data = 14;
inline bool Packet::_internal_has_fin_data() const {
  return this != internal_default_instance() && fin_data_ != nullptr;
}
inline bool Packet::has_fin_data() const {
  return _internal_has_fin_data();
}
inline void Packet::clear_fin_data() {
  if (GetArena() == nullptr && fin_data_ != nullptr) {
    delete fin_data_;
  }
  fin_data_ = nullptr;
}
inline const ::proto::FinMessage& Packet::_internal_fin_data() const {
  const ::proto::FinMessage* p = fin_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::FinMessage*>(
      &::proto::_FinMessage_default_instance_);
}
inline const ::proto::FinMessage& Packet::fin_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.fin_data)
  return _internal_fin_data();
}
inline void Packet::unsafe_arena_set_allocated_fin_data(
    ::proto::FinMessage* fin_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fin_data_);
  }
  fin_data_ = fin_data;
  if (fin_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.fin_data)
}
inline ::proto::FinMessage* Packet::release_fin_data() {
  
  ::proto::FinMessage* temp = fin_data_;
  fin_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::FinMessage* Packet::unsafe_arena_release_fin_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.fin_data)
  
  ::proto::FinMessage* temp = fin_data_;
  fin_data_ = nullptr;
  return temp;
}
inline ::proto::FinMessage* Packet::_internal_mutable_fin_data() {
  
  if (fin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::FinMessage>(GetArena());
    fin_data_ = p;
  }
  return fin_data_;
}
inline ::proto::FinMessage* Packet::mutable_fin_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.fin_data)
  return _internal_mutable_fin_data();
}
inline void Packet::set_allocated_fin_data(::proto::FinMessage* fin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fin_data_;
  }
  if (fin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fin_data);
    if (message_arena != submessage_arena) {
      fin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fin_data, submessage_arena);
    }
    
  } else {
    
  }
  fin_data_ = fin_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.fin_data)
}

// .proto.HelloLbsMessage hello_lbs_data = 15;
inline bool Packet::_internal_has_hello_lbs_data() const {
  return this != internal_default_instance() && hello_lbs_data_ != nullptr;
}
inline bool Packet::has_hello_lbs_data() const {
  return _internal_has_hello_lbs_data();
}
inline void Packet::clear_hello_lbs_data() {
  if (GetArena() == nullptr && hello_lbs_data_ != nullptr) {
    delete hello_lbs_data_;
  }
  hello_lbs_data_ = nullptr;
}
inline const ::proto::HelloLbsMessage& Packet::_internal_hello_lbs_data() const {
  const ::proto::HelloLbsMessage* p = hello_lbs_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::HelloLbsMessage*>(
      &::proto::_HelloLbsMessage_default_instance_);
}
inline const ::proto::HelloLbsMessage& Packet::hello_lbs_data() const {
  // @@protoc_insertion_point(field_get:proto.Packet.hello_lbs_data)
  return _internal_hello_lbs_data();
}
inline void Packet::unsafe_arena_set_allocated_hello_lbs_data(
    ::proto::HelloLbsMessage* hello_lbs_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hello_lbs_data_);
  }
  hello_lbs_data_ = hello_lbs_data;
  if (hello_lbs_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Packet.hello_lbs_data)
}
inline ::proto::HelloLbsMessage* Packet::release_hello_lbs_data() {
  
  ::proto::HelloLbsMessage* temp = hello_lbs_data_;
  hello_lbs_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::HelloLbsMessage* Packet::unsafe_arena_release_hello_lbs_data() {
  // @@protoc_insertion_point(field_release:proto.Packet.hello_lbs_data)
  
  ::proto::HelloLbsMessage* temp = hello_lbs_data_;
  hello_lbs_data_ = nullptr;
  return temp;
}
inline ::proto::HelloLbsMessage* Packet::_internal_mutable_hello_lbs_data() {
  
  if (hello_lbs_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::HelloLbsMessage>(GetArena());
    hello_lbs_data_ = p;
  }
  return hello_lbs_data_;
}
inline ::proto::HelloLbsMessage* Packet::mutable_hello_lbs_data() {
  // @@protoc_insertion_point(field_mutable:proto.Packet.hello_lbs_data)
  return _internal_mutable_hello_lbs_data();
}
inline void Packet::set_allocated_hello_lbs_data(::proto::HelloLbsMessage* hello_lbs_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hello_lbs_data_;
  }
  if (hello_lbs_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hello_lbs_data);
    if (message_arena != submessage_arena) {
      hello_lbs_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello_lbs_data, submessage_arena);
    }
    
  } else {
    
  }
  hello_lbs_data_ = hello_lbs_data;
  // @@protoc_insertion_point(field_set_allocated:proto.Packet.hello_lbs_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MessageType>() {
  return ::proto::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gdxsv_2eproto
