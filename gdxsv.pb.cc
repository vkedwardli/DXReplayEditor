// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdxsv.proto

#include "gdxsv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogUser_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleMessage_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinMessage_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GamePatch_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePatchCode_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloLbsMessage_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloServerMessage_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingMessage_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAddress_gdxsv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gdxsv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PongMessage_gdxsv_2eproto;
namespace proto {
class P2PMatchingReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<P2PMatchingReport> _instance;
} _P2PMatchingReport_default_instance_;
class P2PMatchingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<P2PMatching> _instance;
} _P2PMatching_default_instance_;
class PlayerAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerAddress> _instance;
} _PlayerAddress_default_instance_;
class GamePatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePatch> _instance;
} _GamePatch_default_instance_;
class GamePatchCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePatchCode> _instance;
} _GamePatchCode_default_instance_;
class GamePatchListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GamePatchList> _instance;
} _GamePatchList_default_instance_;
class BattleLogUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleLogUser> _instance;
} _BattleLogUser_default_instance_;
class BattleLogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleLogFile> _instance;
} _BattleLogFile_default_instance_;
class BattleMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleMessage> _instance;
} _BattleMessage_default_instance_;
class PingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingMessage> _instance;
} _PingMessage_default_instance_;
class PongMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PongMessage> _instance;
} _PongMessage_default_instance_;
class HelloServerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloServerMessage> _instance;
} _HelloServerMessage_default_instance_;
class FinMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FinMessage> _instance;
} _FinMessage_default_instance_;
class HelloLbsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloLbsMessage> _instance;
} _HelloLbsMessage_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Packet> _instance;
} _Packet_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_BattleLogFile_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleLogFile_default_instance_;
    new (ptr) ::proto::BattleLogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleLogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BattleLogFile_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BattleLogFile_gdxsv_2eproto}, {
      &scc_info_GamePatch_gdxsv_2eproto.base,
      &scc_info_BattleLogUser_gdxsv_2eproto.base,
      &scc_info_BattleMessage_gdxsv_2eproto.base,}};

static void InitDefaultsscc_info_BattleLogUser_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleLogUser_default_instance_;
    new (ptr) ::proto::BattleLogUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleLogUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogUser_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleLogUser_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_BattleMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleMessage_default_instance_;
    new (ptr) ::proto::BattleMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleMessage_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_FinMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_FinMessage_default_instance_;
    new (ptr) ::proto::FinMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::FinMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FinMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FinMessage_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_GamePatch_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GamePatch_default_instance_;
    new (ptr) ::proto::GamePatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GamePatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GamePatch_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GamePatch_gdxsv_2eproto}, {
      &scc_info_GamePatchCode_gdxsv_2eproto.base,}};

static void InitDefaultsscc_info_GamePatchCode_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GamePatchCode_default_instance_;
    new (ptr) ::proto::GamePatchCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GamePatchCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GamePatchCode_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GamePatchCode_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_GamePatchList_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_GamePatchList_default_instance_;
    new (ptr) ::proto::GamePatchList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::GamePatchList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GamePatchList_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GamePatchList_gdxsv_2eproto}, {
      &scc_info_GamePatch_gdxsv_2eproto.base,}};

static void InitDefaultsscc_info_HelloLbsMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_HelloLbsMessage_default_instance_;
    new (ptr) ::proto::HelloLbsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::HelloLbsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloLbsMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloLbsMessage_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_HelloServerMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_HelloServerMessage_default_instance_;
    new (ptr) ::proto::HelloServerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::HelloServerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloServerMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HelloServerMessage_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_P2PMatching_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_P2PMatching_default_instance_;
    new (ptr) ::proto::P2PMatching();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::P2PMatching::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_P2PMatching_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_P2PMatching_gdxsv_2eproto}, {
      &scc_info_BattleLogUser_gdxsv_2eproto.base,
      &scc_info_PlayerAddress_gdxsv_2eproto.base,}};

static void InitDefaultsscc_info_P2PMatchingReport_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_P2PMatchingReport_default_instance_;
    new (ptr) ::proto::P2PMatchingReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::P2PMatchingReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_P2PMatchingReport_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_P2PMatchingReport_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_Packet_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_Packet_default_instance_;
    new (ptr) ::proto::Packet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::Packet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Packet_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Packet_gdxsv_2eproto}, {
      &scc_info_HelloServerMessage_gdxsv_2eproto.base,
      &scc_info_PingMessage_gdxsv_2eproto.base,
      &scc_info_PongMessage_gdxsv_2eproto.base,
      &scc_info_BattleMessage_gdxsv_2eproto.base,
      &scc_info_FinMessage_gdxsv_2eproto.base,
      &scc_info_HelloLbsMessage_gdxsv_2eproto.base,}};

static void InitDefaultsscc_info_PingMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_PingMessage_default_instance_;
    new (ptr) ::proto::PingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::PingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingMessage_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_PlayerAddress_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_PlayerAddress_default_instance_;
    new (ptr) ::proto::PlayerAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::PlayerAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerAddress_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerAddress_gdxsv_2eproto}, {}};

static void InitDefaultsscc_info_PongMessage_gdxsv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_PongMessage_default_instance_;
    new (ptr) ::proto::PongMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::PongMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PongMessage_gdxsv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PongMessage_gdxsv_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gdxsv_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gdxsv_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gdxsv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gdxsv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, battle_code_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, player_count_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, peer_id_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, close_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, frame_count_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, disconnected_peer_id_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, after_log_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, before_log_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, fps_history_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, total_timesync_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, input_block_count_0_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, input_block_count_1_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatchingReport, input_block_count_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, battle_code_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, player_count_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, peer_id_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, ping_test_duration_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, is_training_game_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, rule_bin_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, users_),
  PROTOBUF_FIELD_OFFSET(::proto::P2PMatching, candidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, peer_id_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, ip_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, port_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerAddress, team_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatch, game_disk_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatch, name_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatch, write_once_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatch, codes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchCode, size_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchCode, address_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchCode, original_),
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchCode, changed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::GamePatchList, patches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, pilot_name_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, game_param_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, battle_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, win_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, lose_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, grade_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, team_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, platform_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, user_name_sjis_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, game_disk_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, gdxsv_version_deprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, battle_code_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, log_file_version_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, patches_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, rule_bin_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, users_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, battle_data_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, inputs_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, start_msg_indexes_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, start_msg_randoms_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, start_at_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, end_at_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, close_reason_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, disconnect_user_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleMessage, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleMessage, seq_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleMessage, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::PingMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PingMessage, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PongMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::PongMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::PongMessage, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::PongMessage, public_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HelloServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::HelloServerMessage, session_id_deprecated_),
  PROTOBUF_FIELD_OFFSET(::proto::HelloServerMessage, ok_),
  PROTOBUF_FIELD_OFFSET(::proto::HelloServerMessage, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::FinMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::FinMessage, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HelloLbsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::HelloLbsMessage, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::Packet, type_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, seq_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, ack_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, session_id_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, hello_server_data_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, ping_data_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, pong_data_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, battle_data_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, fin_data_),
  PROTOBUF_FIELD_OFFSET(::proto::Packet, hello_lbs_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::P2PMatchingReport)},
  { 19, -1, sizeof(::proto::P2PMatching)},
  { 33, -1, sizeof(::proto::PlayerAddress)},
  { 43, -1, sizeof(::proto::GamePatch)},
  { 52, -1, sizeof(::proto::GamePatchCode)},
  { 61, -1, sizeof(::proto::GamePatchList)},
  { 67, -1, sizeof(::proto::BattleLogUser)},
  { 84, -1, sizeof(::proto::BattleLogFile)},
  { 104, -1, sizeof(::proto::BattleMessage)},
  { 112, -1, sizeof(::proto::PingMessage)},
  { 119, -1, sizeof(::proto::PongMessage)},
  { 127, -1, sizeof(::proto::HelloServerMessage)},
  { 135, -1, sizeof(::proto::FinMessage)},
  { 141, -1, sizeof(::proto::HelloLbsMessage)},
  { 147, -1, sizeof(::proto::Packet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_P2PMatchingReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_P2PMatching_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_PlayerAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_GamePatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_GamePatchCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_GamePatchList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleLogUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleLogFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_PingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_PongMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_HelloServerMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_FinMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_HelloLbsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_Packet_default_instance_),
};

const char descriptor_table_protodef_gdxsv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013gdxsv.proto\022\005proto\"\327\002\n\021P2PMatchingRepo"
  "rt\022\023\n\013battle_code\030\001 \001(\t\022\022\n\nsession_id\030\002 "
  "\001(\005\022\024\n\014player_count\030\003 \001(\005\022\017\n\007peer_id\030\004 \001"
  "(\005\022\024\n\014close_reason\030\005 \001(\t\022\023\n\013frame_count\030"
  "\006 \001(\005\022\034\n\024disconnected_peer_id\030\007 \001(\005\022\021\n\ta"
  "fter_log\030\013 \001(\t\022\022\n\nbefore_log\030\014 \001(\t\022\023\n\013fp"
  "s_history\030\017 \003(\002\022\026\n\016total_timesync\030\020 \001(\005\022"
  "\033\n\023input_block_count_0\030\021 \001(\005\022\033\n\023input_bl"
  "ock_count_1\030\022 \001(\005\022\033\n\023input_block_count_2"
  "\030\023 \001(\005\"\364\001\n\013P2PMatching\022\023\n\013battle_code\030\001 "
  "\001(\t\022\022\n\nsession_id\030\002 \001(\005\022\024\n\014player_count\030"
  "\003 \001(\005\022\017\n\007peer_id\030\004 \001(\005\022\032\n\022ping_test_dura"
  "tion\030\006 \001(\005\022\030\n\020is_training_game\030\007 \001(\010\022\020\n\010"
  "rule_bin\030\010 \001(\014\022#\n\005users\030\t \003(\0132\024.proto.Ba"
  "ttleLogUser\022(\n\ncandidates\030\n \003(\0132\024.proto."
  "PlayerAddress\"Y\n\rPlayerAddress\022\017\n\007user_i"
  "d\030\001 \001(\t\022\017\n\007peer_id\030\002 \001(\005\022\n\n\002ip\030\003 \001(\t\022\014\n\004"
  "port\030\004 \001(\005\022\014\n\004team\030\005 \001(\005\"e\n\tGamePatch\022\021\n"
  "\tgame_disk\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\022\n\nwrite_"
  "once\030\004 \001(\010\022#\n\005codes\030\n \003(\0132\024.proto.GamePa"
  "tchCode\"Q\n\rGamePatchCode\022\014\n\004size\030\001 \001(\005\022\017"
  "\n\007address\030\002 \001(\r\022\020\n\010original\030\003 \001(\r\022\017\n\007cha"
  "nged\030\004 \001(\r\"2\n\rGamePatchList\022!\n\007patches\030\001"
  " \003(\0132\020.proto.GamePatch\"\354\001\n\rBattleLogUser"
  "\022\017\n\007user_id\030\001 \001(\t\022\021\n\tuser_name\030\002 \001(\t\022\022\n\n"
  "pilot_name\030\003 \001(\t\022\022\n\ngame_param\030\004 \001(\014\022\024\n\014"
  "battle_count\030\005 \001(\005\022\021\n\twin_count\030\006 \001(\005\022\022\n"
  "\nlose_count\030\007 \001(\005\022\r\n\005grade\030\010 \001(\005\022\014\n\004team"
  "\030\t \001(\005\022\020\n\010platform\030\n \001(\t\022\026\n\016user_name_sj"
  "is\030\013 \001(\014\022\013\n\003pos\030\014 \001(\005\"\225\003\n\rBattleLogFile\022"
  "\021\n\tgame_disk\030\005 \001(\t\022 \n\030gdxsv_version_depr"
  "ecated\030\002 \001(\t\022\023\n\013battle_code\030\003 \001(\t\022\030\n\020log"
  "_file_version\030\004 \001(\005\022!\n\007patches\030\007 \003(\0132\020.p"
  "roto.GamePatch\022\020\n\010rule_bin\030\n \001(\014\022#\n\005user"
  "s\030\013 \003(\0132\024.proto.BattleLogUser\022)\n\013battle_"
  "data\030\014 \003(\0132\024.proto.BattleMessage\022\016\n\006inpu"
  "ts\030\017 \003(\006\022\031\n\021start_msg_indexes\030\020 \003(\005\022\031\n\021s"
  "tart_msg_randoms\030\021 \003(\004\022\020\n\010start_at\030\024 \001(\003"
  "\022\016\n\006end_at\030\025 \001(\003\022\024\n\014close_reason\030\030 \001(\t\022\035"
  "\n\025disconnect_user_index\030\031 \001(\005\";\n\rBattleM"
  "essage\022\017\n\007user_id\030\001 \001(\t\022\013\n\003seq\030\002 \001(\r\022\014\n\004"
  "body\030\003 \001(\014\"1\n\013PingMessage\022\021\n\ttimestamp\030\001"
  " \001(\003\022\017\n\007user_id\030\002 \001(\t\"F\n\013PongMessage\022\021\n\t"
  "timestamp\030\001 \001(\003\022\017\n\007user_id\030\002 \001(\t\022\023\n\013publ"
  "ic_addr\030\003 \001(\t\"P\n\022HelloServerMessage\022\035\n\025s"
  "ession_id_deprecated\030\001 \001(\t\022\n\n\002ok\030\002 \001(\010\022\017"
  "\n\007user_id\030\003 \001(\t\"\034\n\nFinMessage\022\016\n\006detail\030"
  "\001 \001(\t\"\"\n\017HelloLbsMessage\022\017\n\007user_id\030\001 \001("
  "\t\"\334\002\n\006Packet\022 \n\004type\030\001 \001(\0162\022.proto.Messa"
  "geType\022\013\n\003seq\030\002 \001(\r\022\013\n\003ack\030\003 \001(\r\022\022\n\nsess"
  "ion_id\030\005 \001(\t\0224\n\021hello_server_data\030\n \001(\0132"
  "\031.proto.HelloServerMessage\022%\n\tping_data\030"
  "\013 \001(\0132\022.proto.PingMessage\022%\n\tpong_data\030\014"
  " \001(\0132\022.proto.PongMessage\022)\n\013battle_data\030"
  "\r \003(\0132\024.proto.BattleMessage\022#\n\010fin_data\030"
  "\016 \001(\0132\021.proto.FinMessage\022.\n\016hello_lbs_da"
  "ta\030\017 \001(\0132\026.proto.HelloLbsMessage*_\n\013Mess"
  "ageType\022\010\n\004None\020\000\022\017\n\013HelloServer\020\001\022\010\n\004Pi"
  "ng\020\002\022\010\n\004Pong\020\003\022\n\n\006Battle\020\004\022\007\n\003Fin\020\005\022\014\n\010H"
  "elloLbs\020\nB\rZ\013gdxsv/protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gdxsv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gdxsv_2eproto_sccs[15] = {
  &scc_info_BattleLogFile_gdxsv_2eproto.base,
  &scc_info_BattleLogUser_gdxsv_2eproto.base,
  &scc_info_BattleMessage_gdxsv_2eproto.base,
  &scc_info_FinMessage_gdxsv_2eproto.base,
  &scc_info_GamePatch_gdxsv_2eproto.base,
  &scc_info_GamePatchCode_gdxsv_2eproto.base,
  &scc_info_GamePatchList_gdxsv_2eproto.base,
  &scc_info_HelloLbsMessage_gdxsv_2eproto.base,
  &scc_info_HelloServerMessage_gdxsv_2eproto.base,
  &scc_info_P2PMatching_gdxsv_2eproto.base,
  &scc_info_P2PMatchingReport_gdxsv_2eproto.base,
  &scc_info_Packet_gdxsv_2eproto.base,
  &scc_info_PingMessage_gdxsv_2eproto.base,
  &scc_info_PlayerAddress_gdxsv_2eproto.base,
  &scc_info_PongMessage_gdxsv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gdxsv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gdxsv_2eproto = {
  false, false, descriptor_table_protodef_gdxsv_2eproto, "gdxsv.proto", 2392,
  &descriptor_table_gdxsv_2eproto_once, descriptor_table_gdxsv_2eproto_sccs, descriptor_table_gdxsv_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_gdxsv_2eproto::offsets,
  file_level_metadata_gdxsv_2eproto, 15, file_level_enum_descriptors_gdxsv_2eproto, file_level_service_descriptors_gdxsv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gdxsv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gdxsv_2eproto)), true);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gdxsv_2eproto);
  return file_level_enum_descriptors_gdxsv_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void P2PMatchingReport::InitAsDefaultInstance() {
}
class P2PMatchingReport::_Internal {
 public:
};

P2PMatchingReport::P2PMatchingReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fps_history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.P2PMatchingReport)
}
P2PMatchingReport::P2PMatchingReport(const P2PMatchingReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fps_history_(from.fps_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_code().empty()) {
    battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_battle_code(),
      GetArena());
  }
  close_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close_reason().empty()) {
    close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_close_reason(),
      GetArena());
  }
  after_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_after_log().empty()) {
    after_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_after_log(),
      GetArena());
  }
  before_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_before_log().empty()) {
    before_log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_before_log(),
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_block_count_1_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(input_block_count_1_));
  // @@protoc_insertion_point(copy_constructor:proto.P2PMatchingReport)
}

void P2PMatchingReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_P2PMatchingReport_gdxsv_2eproto.base);
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  after_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  before_log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_block_count_1_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(input_block_count_1_));
}

P2PMatchingReport::~P2PMatchingReport() {
  // @@protoc_insertion_point(destructor:proto.P2PMatchingReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2PMatchingReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  battle_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  after_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  before_log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P2PMatchingReport::ArenaDtor(void* object) {
  P2PMatchingReport* _this = reinterpret_cast< P2PMatchingReport* >(object);
  (void)_this;
}
void P2PMatchingReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2PMatchingReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const P2PMatchingReport& P2PMatchingReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_P2PMatchingReport_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void P2PMatchingReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.P2PMatchingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fps_history_.Clear();
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  after_log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  before_log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_block_count_1_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(input_block_count_1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2PMatchingReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string battle_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_battle_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.P2PMatchingReport.battle_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 peer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string close_reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_close_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.P2PMatchingReport.close_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frame_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frame_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnected_peer_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          disconnected_peer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string after_log = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_after_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.P2PMatchingReport.after_log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string before_log = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_before_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.P2PMatchingReport.before_log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float fps_history = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_fps_history(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125) {
          _internal_add_fps_history(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 total_timesync = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          total_timesync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 input_block_count_0 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          input_block_count_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 input_block_count_1 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          input_block_count_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 input_block_count_2 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          input_block_count_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2PMatchingReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.P2PMatchingReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string battle_code = 1;
  if (this->battle_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_battle_code().data(), static_cast<int>(this->_internal_battle_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.P2PMatchingReport.battle_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_battle_code(), target);
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_session_id(), target);
  }

  // int32 player_count = 3;
  if (this->player_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_count(), target);
  }

  // int32 peer_id = 4;
  if (this->peer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_peer_id(), target);
  }

  // string close_reason = 5;
  if (this->close_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_reason().data(), static_cast<int>(this->_internal_close_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.P2PMatchingReport.close_reason");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_close_reason(), target);
  }

  // int32 frame_count = 6;
  if (this->frame_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_frame_count(), target);
  }

  // int32 disconnected_peer_id = 7;
  if (this->disconnected_peer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_disconnected_peer_id(), target);
  }

  // string after_log = 11;
  if (this->after_log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_after_log().data(), static_cast<int>(this->_internal_after_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.P2PMatchingReport.after_log");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_after_log(), target);
  }

  // string before_log = 12;
  if (this->before_log().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_before_log().data(), static_cast<int>(this->_internal_before_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.P2PMatchingReport.before_log");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_before_log(), target);
  }

  // repeated float fps_history = 15;
  if (this->_internal_fps_history_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_fps_history(), target);
  }

  // int32 total_timesync = 16;
  if (this->total_timesync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_total_timesync(), target);
  }

  // int32 input_block_count_0 = 17;
  if (this->input_block_count_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_input_block_count_0(), target);
  }

  // int32 input_block_count_1 = 18;
  if (this->input_block_count_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_input_block_count_1(), target);
  }

  // int32 input_block_count_2 = 19;
  if (this->input_block_count_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_input_block_count_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.P2PMatchingReport)
  return target;
}

size_t P2PMatchingReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.P2PMatchingReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float fps_history = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fps_history_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fps_history_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string battle_code = 1;
  if (this->battle_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battle_code());
  }

  // string close_reason = 5;
  if (this->close_reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_reason());
  }

  // string after_log = 11;
  if (this->after_log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_after_log());
  }

  // string before_log = 12;
  if (this->before_log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_before_log());
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  // int32 player_count = 3;
  if (this->player_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_count());
  }

  // int32 peer_id = 4;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peer_id());
  }

  // int32 frame_count = 6;
  if (this->frame_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frame_count());
  }

  // int32 disconnected_peer_id = 7;
  if (this->disconnected_peer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disconnected_peer_id());
  }

  // int32 total_timesync = 16;
  if (this->total_timesync() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_timesync());
  }

  // int32 input_block_count_2 = 19;
  if (this->input_block_count_2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_block_count_2());
  }

  // int32 input_block_count_0 = 17;
  if (this->input_block_count_0() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_block_count_0());
  }

  // int32 input_block_count_1 = 18;
  if (this->input_block_count_1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input_block_count_1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2PMatchingReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.P2PMatchingReport)
  GOOGLE_DCHECK_NE(&from, this);
  const P2PMatchingReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2PMatchingReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.P2PMatchingReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.P2PMatchingReport)
    MergeFrom(*source);
  }
}

void P2PMatchingReport::MergeFrom(const P2PMatchingReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.P2PMatchingReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fps_history_.MergeFrom(from.fps_history_);
  if (from.battle_code().size() > 0) {
    _internal_set_battle_code(from._internal_battle_code());
  }
  if (from.close_reason().size() > 0) {
    _internal_set_close_reason(from._internal_close_reason());
  }
  if (from.after_log().size() > 0) {
    _internal_set_after_log(from._internal_after_log());
  }
  if (from.before_log().size() > 0) {
    _internal_set_before_log(from._internal_before_log());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.player_count() != 0) {
    _internal_set_player_count(from._internal_player_count());
  }
  if (from.peer_id() != 0) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from.frame_count() != 0) {
    _internal_set_frame_count(from._internal_frame_count());
  }
  if (from.disconnected_peer_id() != 0) {
    _internal_set_disconnected_peer_id(from._internal_disconnected_peer_id());
  }
  if (from.total_timesync() != 0) {
    _internal_set_total_timesync(from._internal_total_timesync());
  }
  if (from.input_block_count_2() != 0) {
    _internal_set_input_block_count_2(from._internal_input_block_count_2());
  }
  if (from.input_block_count_0() != 0) {
    _internal_set_input_block_count_0(from._internal_input_block_count_0());
  }
  if (from.input_block_count_1() != 0) {
    _internal_set_input_block_count_1(from._internal_input_block_count_1());
  }
}

void P2PMatchingReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.P2PMatchingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2PMatchingReport::CopyFrom(const P2PMatchingReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.P2PMatchingReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PMatchingReport::IsInitialized() const {
  return true;
}

void P2PMatchingReport::InternalSwap(P2PMatchingReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fps_history_.InternalSwap(&other->fps_history_);
  battle_code_.Swap(&other->battle_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_reason_.Swap(&other->close_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  after_log_.Swap(&other->after_log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  before_log_.Swap(&other->before_log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P2PMatchingReport, input_block_count_1_)
      + sizeof(P2PMatchingReport::input_block_count_1_)
      - PROTOBUF_FIELD_OFFSET(P2PMatchingReport, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P2PMatchingReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void P2PMatching::InitAsDefaultInstance() {
}
class P2PMatching::_Internal {
 public:
};

P2PMatching::P2PMatching(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena),
  candidates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.P2PMatching)
}
P2PMatching::P2PMatching(const P2PMatching& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_code().empty()) {
    battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_battle_code(),
      GetArena());
  }
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule_bin().empty()) {
    rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rule_bin(),
      GetArena());
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_training_game_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(is_training_game_));
  // @@protoc_insertion_point(copy_constructor:proto.P2PMatching)
}

void P2PMatching::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_P2PMatching_gdxsv_2eproto.base);
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_training_game_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(is_training_game_));
}

P2PMatching::~P2PMatching() {
  // @@protoc_insertion_point(destructor:proto.P2PMatching)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void P2PMatching::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  battle_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void P2PMatching::ArenaDtor(void* object) {
  P2PMatching* _this = reinterpret_cast< P2PMatching* >(object);
  (void)_this;
}
void P2PMatching::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void P2PMatching::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const P2PMatching& P2PMatching::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_P2PMatching_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void P2PMatching::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.P2PMatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  candidates_.Clear();
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_training_game_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(is_training_game_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* P2PMatching::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string battle_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_battle_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.P2PMatching.battle_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 peer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          peer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ping_test_duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ping_test_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_training_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_training_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rule_bin = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_rule_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleLogUser users = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.PlayerAddress candidates = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* P2PMatching::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.P2PMatching)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string battle_code = 1;
  if (this->battle_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_battle_code().data(), static_cast<int>(this->_internal_battle_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.P2PMatching.battle_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_battle_code(), target);
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_session_id(), target);
  }

  // int32 player_count = 3;
  if (this->player_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_count(), target);
  }

  // int32 peer_id = 4;
  if (this->peer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_peer_id(), target);
  }

  // int32 ping_test_duration = 6;
  if (this->ping_test_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ping_test_duration(), target);
  }

  // bool is_training_game = 7;
  if (this->is_training_game() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_training_game(), target);
  }

  // bytes rule_bin = 8;
  if (this->rule_bin().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_rule_bin(), target);
  }

  // repeated .proto.BattleLogUser users = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_users(i), target, stream);
  }

  // repeated .proto.PlayerAddress candidates = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_candidates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.P2PMatching)
  return target;
}

size_t P2PMatching::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.P2PMatching)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.BattleLogUser users = 9;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.PlayerAddress candidates = 10;
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string battle_code = 1;
  if (this->battle_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battle_code());
  }

  // bytes rule_bin = 8;
  if (this->rule_bin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rule_bin());
  }

  // int32 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  // int32 player_count = 3;
  if (this->player_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_count());
  }

  // int32 peer_id = 4;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peer_id());
  }

  // int32 ping_test_duration = 6;
  if (this->ping_test_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ping_test_duration());
  }

  // bool is_training_game = 7;
  if (this->is_training_game() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void P2PMatching::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.P2PMatching)
  GOOGLE_DCHECK_NE(&from, this);
  const P2PMatching* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<P2PMatching>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.P2PMatching)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.P2PMatching)
    MergeFrom(*source);
  }
}

void P2PMatching::MergeFrom(const P2PMatching& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.P2PMatching)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  candidates_.MergeFrom(from.candidates_);
  if (from.battle_code().size() > 0) {
    _internal_set_battle_code(from._internal_battle_code());
  }
  if (from.rule_bin().size() > 0) {
    _internal_set_rule_bin(from._internal_rule_bin());
  }
  if (from.session_id() != 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.player_count() != 0) {
    _internal_set_player_count(from._internal_player_count());
  }
  if (from.peer_id() != 0) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from.ping_test_duration() != 0) {
    _internal_set_ping_test_duration(from._internal_ping_test_duration());
  }
  if (from.is_training_game() != 0) {
    _internal_set_is_training_game(from._internal_is_training_game());
  }
}

void P2PMatching::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.P2PMatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P2PMatching::CopyFrom(const P2PMatching& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.P2PMatching)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P2PMatching::IsInitialized() const {
  return true;
}

void P2PMatching::InternalSwap(P2PMatching* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  candidates_.InternalSwap(&other->candidates_);
  battle_code_.Swap(&other->battle_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.Swap(&other->rule_bin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(P2PMatching, is_training_game_)
      + sizeof(P2PMatching::is_training_game_)
      - PROTOBUF_FIELD_OFFSET(P2PMatching, session_id_)>(
          reinterpret_cast<char*>(&session_id_),
          reinterpret_cast<char*>(&other->session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata P2PMatching::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerAddress::InitAsDefaultInstance() {
}
class PlayerAddress::_Internal {
 public:
};

PlayerAddress::PlayerAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PlayerAddress)
}
PlayerAddress::PlayerAddress(const PlayerAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&peer_id_, &from.peer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&peer_id_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerAddress)
}

void PlayerAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerAddress_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(team_));
}

PlayerAddress::~PlayerAddress() {
  // @@protoc_insertion_point(destructor:proto.PlayerAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlayerAddress::ArenaDtor(void* object) {
  PlayerAddress* _this = reinterpret_cast< PlayerAddress* >(object);
  (void)_this;
}
void PlayerAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerAddress& PlayerAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerAddress_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void PlayerAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&peer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&peer_id_)) + sizeof(team_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PlayerAddress.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 peer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          peer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PlayerAddress.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerAddress.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // int32 peer_id = 2;
  if (this->peer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_peer_id(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerAddress.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_port(), target);
  }

  // int32 team = 5;
  if (this->team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerAddress)
  return target;
}

size_t PlayerAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 peer_id = 2;
  if (this->peer_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peer_id());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int32 team = 5;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerAddress)
    MergeFrom(*source);
  }
}

void PlayerAddress::MergeFrom(const PlayerAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.peer_id() != 0) {
    _internal_set_peer_id(from._internal_peer_id());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.team() != 0) {
    _internal_set_team(from._internal_team());
  }
}

void PlayerAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAddress::CopyFrom(const PlayerAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAddress::IsInitialized() const {
  return true;
}

void PlayerAddress::InternalSwap(PlayerAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAddress, team_)
      + sizeof(PlayerAddress::team_)
      - PROTOBUF_FIELD_OFFSET(PlayerAddress, peer_id_)>(
          reinterpret_cast<char*>(&peer_id_),
          reinterpret_cast<char*>(&other->peer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GamePatch::InitAsDefaultInstance() {
}
class GamePatch::_Internal {
 public:
};

GamePatch::GamePatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  codes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.GamePatch)
}
GamePatch::GamePatch(const GamePatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      codes_(from.codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_disk().empty()) {
    game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_disk(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  write_once_ = from.write_once_;
  // @@protoc_insertion_point(copy_constructor:proto.GamePatch)
}

void GamePatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePatch_gdxsv_2eproto.base);
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  write_once_ = false;
}

GamePatch::~GamePatch() {
  // @@protoc_insertion_point(destructor:proto.GamePatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  game_disk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GamePatch::ArenaDtor(void* object) {
  GamePatch* _this = reinterpret_cast< GamePatch* >(object);
  (void)_this;
}
void GamePatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePatch& GamePatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePatch_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void GamePatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GamePatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codes_.Clear();
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  write_once_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string game_disk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_game_disk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.GamePatch.game_disk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.GamePatch.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool write_once = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.GamePatchCode codes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_codes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GamePatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string game_disk = 1;
  if (this->game_disk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_disk().data(), static_cast<int>(this->_internal_game_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GamePatch.game_disk");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_game_disk(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GamePatch.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool write_once = 4;
  if (this->write_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_write_once(), target);
  }

  // repeated .proto.GamePatchCode codes = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_codes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_codes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GamePatch)
  return target;
}

size_t GamePatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GamePatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GamePatchCode codes = 10;
  total_size += 1UL * this->_internal_codes_size();
  for (const auto& msg : this->codes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string game_disk = 1;
  if (this->game_disk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_disk());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool write_once = 4;
  if (this->write_once() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GamePatch)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GamePatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GamePatch)
    MergeFrom(*source);
  }
}

void GamePatch::MergeFrom(const GamePatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GamePatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  codes_.MergeFrom(from.codes_);
  if (from.game_disk().size() > 0) {
    _internal_set_game_disk(from._internal_game_disk());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.write_once() != 0) {
    _internal_set_write_once(from._internal_write_once());
  }
}

void GamePatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GamePatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePatch::CopyFrom(const GamePatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GamePatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePatch::IsInitialized() const {
  return true;
}

void GamePatch::InternalSwap(GamePatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  codes_.InternalSwap(&other->codes_);
  game_disk_.Swap(&other->game_disk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(write_once_, other->write_once_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GamePatchCode::InitAsDefaultInstance() {
}
class GamePatchCode::_Internal {
 public:
};

GamePatchCode::GamePatchCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.GamePatchCode)
}
GamePatchCode::GamePatchCode(const GamePatchCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&changed_) -
    reinterpret_cast<char*>(&size_)) + sizeof(changed_));
  // @@protoc_insertion_point(copy_constructor:proto.GamePatchCode)
}

void GamePatchCode::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_) -
      reinterpret_cast<char*>(&size_)) + sizeof(changed_));
}

GamePatchCode::~GamePatchCode() {
  // @@protoc_insertion_point(destructor:proto.GamePatchCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePatchCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePatchCode::ArenaDtor(void* object) {
  GamePatchCode* _this = reinterpret_cast< GamePatchCode* >(object);
  (void)_this;
}
void GamePatchCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePatchCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePatchCode& GamePatchCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePatchCode_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void GamePatchCode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GamePatchCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changed_) -
      reinterpret_cast<char*>(&size_)) + sizeof(changed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePatchCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 original = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          original_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 changed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          changed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePatchCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GamePatchCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_size(), target);
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_address(), target);
  }

  // uint32 original = 3;
  if (this->original() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_original(), target);
  }

  // uint32 changed = 4;
  if (this->changed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_changed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GamePatchCode)
  return target;
}

size_t GamePatchCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GamePatchCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  // uint32 address = 2;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // uint32 original = 3;
  if (this->original() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_original());
  }

  // uint32 changed = 4;
  if (this->changed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_changed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePatchCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GamePatchCode)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePatchCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePatchCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GamePatchCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GamePatchCode)
    MergeFrom(*source);
  }
}

void GamePatchCode::MergeFrom(const GamePatchCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GamePatchCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.original() != 0) {
    _internal_set_original(from._internal_original());
  }
  if (from.changed() != 0) {
    _internal_set_changed(from._internal_changed());
  }
}

void GamePatchCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GamePatchCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePatchCode::CopyFrom(const GamePatchCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GamePatchCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePatchCode::IsInitialized() const {
  return true;
}

void GamePatchCode::InternalSwap(GamePatchCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamePatchCode, changed_)
      + sizeof(GamePatchCode::changed_)
      - PROTOBUF_FIELD_OFFSET(GamePatchCode, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePatchCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GamePatchList::InitAsDefaultInstance() {
}
class GamePatchList::_Internal {
 public:
};

GamePatchList::GamePatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.GamePatchList)
}
GamePatchList::GamePatchList(const GamePatchList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      patches_(from.patches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GamePatchList)
}

void GamePatchList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GamePatchList_gdxsv_2eproto.base);
}

GamePatchList::~GamePatchList() {
  // @@protoc_insertion_point(destructor:proto.GamePatchList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GamePatchList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GamePatchList::ArenaDtor(void* object) {
  GamePatchList* _this = reinterpret_cast< GamePatchList* >(object);
  (void)_this;
}
void GamePatchList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GamePatchList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GamePatchList& GamePatchList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GamePatchList_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void GamePatchList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GamePatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamePatchList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .proto.GamePatch patches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GamePatchList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GamePatchList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GamePatch patches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_patches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GamePatchList)
  return target;
}

size_t GamePatchList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GamePatchList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GamePatch patches = 1;
  total_size += 1UL * this->_internal_patches_size();
  for (const auto& msg : this->patches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GamePatchList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GamePatchList)
  GOOGLE_DCHECK_NE(&from, this);
  const GamePatchList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GamePatchList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GamePatchList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GamePatchList)
    MergeFrom(*source);
  }
}

void GamePatchList::MergeFrom(const GamePatchList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GamePatchList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_.MergeFrom(from.patches_);
}

void GamePatchList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GamePatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePatchList::CopyFrom(const GamePatchList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GamePatchList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePatchList::IsInitialized() const {
  return true;
}

void GamePatchList::InternalSwap(GamePatchList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  patches_.InternalSwap(&other->patches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GamePatchList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleLogUser::InitAsDefaultInstance() {
}
class BattleLogUser::_Internal {
 public:
};

BattleLogUser::BattleLogUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleLogUser)
}
BattleLogUser::BattleLogUser(const BattleLogUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  pilot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pilot_name().empty()) {
    pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pilot_name(),
      GetArena());
  }
  game_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_param().empty()) {
    game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_param(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  user_name_sjis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name_sjis().empty()) {
    user_name_sjis_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name_sjis(),
      GetArena());
  }
  ::memcpy(&battle_count_, &from.battle_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&battle_count_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:proto.BattleLogUser)
}

void BattleLogUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleLogUser_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pilot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_sjis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&battle_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&battle_count_)) + sizeof(pos_));
}

BattleLogUser::~BattleLogUser() {
  // @@protoc_insertion_point(destructor:proto.BattleLogUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleLogUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pilot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_sjis_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleLogUser::ArenaDtor(void* object) {
  BattleLogUser* _this = reinterpret_cast< BattleLogUser* >(object);
  (void)_this;
}
void BattleLogUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleLogUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleLogUser& BattleLogUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleLogUser_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void BattleLogUser::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleLogUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pilot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_sjis_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&battle_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&battle_count_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleLogUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pilot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pilot_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.pilot_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          battle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lose_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lose_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 grade = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          grade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 team = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes user_name_sjis = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_user_name_sjis();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pos = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleLogUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleLogUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // string pilot_name = 3;
  if (this->pilot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pilot_name().data(), static_cast<int>(this->_internal_pilot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.pilot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pilot_name(), target);
  }

  // bytes game_param = 4;
  if (this->game_param().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_game_param(), target);
  }

  // int32 battle_count = 5;
  if (this->battle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_battle_count(), target);
  }

  // int32 win_count = 6;
  if (this->win_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_win_count(), target);
  }

  // int32 lose_count = 7;
  if (this->lose_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lose_count(), target);
  }

  // int32 grade = 8;
  if (this->grade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_grade(), target);
  }

  // int32 team = 9;
  if (this->team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_team(), target);
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.platform");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_platform(), target);
  }

  // bytes user_name_sjis = 11;
  if (this->user_name_sjis().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_user_name_sjis(), target);
  }

  // int32 pos = 12;
  if (this->pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleLogUser)
  return target;
}

size_t BattleLogUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleLogUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string pilot_name = 3;
  if (this->pilot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pilot_name());
  }

  // bytes game_param = 4;
  if (this->game_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_param());
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // bytes user_name_sjis = 11;
  if (this->user_name_sjis().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_user_name_sjis());
  }

  // int32 battle_count = 5;
  if (this->battle_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_count());
  }

  // int32 win_count = 6;
  if (this->win_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_count());
  }

  // int32 lose_count = 7;
  if (this->lose_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lose_count());
  }

  // int32 grade = 8;
  if (this->grade() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_grade());
  }

  // int32 team = 9;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team());
  }

  // int32 pos = 12;
  if (this->pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pos());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleLogUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleLogUser)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleLogUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleLogUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleLogUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleLogUser)
    MergeFrom(*source);
  }
}

void BattleLogUser::MergeFrom(const BattleLogUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleLogUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.pilot_name().size() > 0) {
    _internal_set_pilot_name(from._internal_pilot_name());
  }
  if (from.game_param().size() > 0) {
    _internal_set_game_param(from._internal_game_param());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.user_name_sjis().size() > 0) {
    _internal_set_user_name_sjis(from._internal_user_name_sjis());
  }
  if (from.battle_count() != 0) {
    _internal_set_battle_count(from._internal_battle_count());
  }
  if (from.win_count() != 0) {
    _internal_set_win_count(from._internal_win_count());
  }
  if (from.lose_count() != 0) {
    _internal_set_lose_count(from._internal_lose_count());
  }
  if (from.grade() != 0) {
    _internal_set_grade(from._internal_grade());
  }
  if (from.team() != 0) {
    _internal_set_team(from._internal_team());
  }
  if (from.pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
}

void BattleLogUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleLogUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLogUser::CopyFrom(const BattleLogUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleLogUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLogUser::IsInitialized() const {
  return true;
}

void BattleLogUser::InternalSwap(BattleLogUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pilot_name_.Swap(&other->pilot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_param_.Swap(&other->game_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_sjis_.Swap(&other->user_name_sjis_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleLogUser, pos_)
      + sizeof(BattleLogUser::pos_)
      - PROTOBUF_FIELD_OFFSET(BattleLogUser, battle_count_)>(
          reinterpret_cast<char*>(&battle_count_),
          reinterpret_cast<char*>(&other->battle_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleLogUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleLogFile::InitAsDefaultInstance() {
}
class BattleLogFile::_Internal {
 public:
};

BattleLogFile::BattleLogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  patches_(arena),
  users_(arena),
  battle_data_(arena),
  inputs_(arena),
  start_msg_indexes_(arena),
  start_msg_randoms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleLogFile)
}
BattleLogFile::BattleLogFile(const BattleLogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      patches_(from.patches_),
      users_(from.users_),
      battle_data_(from.battle_data_),
      inputs_(from.inputs_),
      start_msg_indexes_(from.start_msg_indexes_),
      start_msg_randoms_(from.start_msg_randoms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gdxsv_version_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gdxsv_version_deprecated().empty()) {
    gdxsv_version_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gdxsv_version_deprecated(),
      GetArena());
  }
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_code().empty()) {
    battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_battle_code(),
      GetArena());
  }
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_disk().empty()) {
    game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_disk(),
      GetArena());
  }
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule_bin().empty()) {
    rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rule_bin(),
      GetArena());
  }
  close_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close_reason().empty()) {
    close_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_close_reason(),
      GetArena());
  }
  ::memcpy(&log_file_version_, &from.log_file_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_at_) -
    reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
  // @@protoc_insertion_point(copy_constructor:proto.BattleLogFile)
}

void BattleLogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleLogFile_gdxsv_2eproto.base);
  gdxsv_version_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_file_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_at_) -
      reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
}

BattleLogFile::~BattleLogFile() {
  // @@protoc_insertion_point(destructor:proto.BattleLogFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleLogFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gdxsv_version_deprecated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_disk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleLogFile::ArenaDtor(void* object) {
  BattleLogFile* _this = reinterpret_cast< BattleLogFile* >(object);
  (void)_this;
}
void BattleLogFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleLogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleLogFile& BattleLogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleLogFile_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void BattleLogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleLogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patches_.Clear();
  users_.Clear();
  battle_data_.Clear();
  inputs_.Clear();
  start_msg_indexes_.Clear();
  start_msg_randoms_.Clear();
  gdxsv_version_deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&log_file_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_at_) -
      reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleLogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gdxsv_version_deprecated = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gdxsv_version_deprecated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.gdxsv_version_deprecated"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string battle_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_battle_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.battle_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 log_file_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          log_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string game_disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_game_disk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.game_disk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.GamePatch patches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes rule_bin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rule_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleLogUser users = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleMessage battle_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battle_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated fixed64 inputs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_inputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121) {
          _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated int32 start_msg_indexes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_start_msg_indexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_start_msg_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 start_msg_randoms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_start_msg_randoms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_start_msg_randoms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 start_at = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          start_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_at = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          end_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string close_reason = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_close_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.close_reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnect_user_index = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          disconnect_user_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleLogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleLogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gdxsv_version_deprecated = 2;
  if (this->gdxsv_version_deprecated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gdxsv_version_deprecated().data(), static_cast<int>(this->_internal_gdxsv_version_deprecated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.gdxsv_version_deprecated");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gdxsv_version_deprecated(), target);
  }

  // string battle_code = 3;
  if (this->battle_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_battle_code().data(), static_cast<int>(this->_internal_battle_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.battle_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_battle_code(), target);
  }

  // int32 log_file_version = 4;
  if (this->log_file_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_log_file_version(), target);
  }

  // string game_disk = 5;
  if (this->game_disk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_disk().data(), static_cast<int>(this->_internal_game_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.game_disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_game_disk(), target);
  }

  // repeated .proto.GamePatch patches = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_patches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_patches(i), target, stream);
  }

  // bytes rule_bin = 10;
  if (this->rule_bin().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_rule_bin(), target);
  }

  // repeated .proto.BattleLogUser users = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_users(i), target, stream);
  }

  // repeated .proto.BattleMessage battle_data = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battle_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_battle_data(i), target, stream);
  }

  // repeated fixed64 inputs = 15;
  if (this->_internal_inputs_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_inputs(), target);
  }

  // repeated int32 start_msg_indexes = 16;
  {
    int byte_size = _start_msg_indexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          16, _internal_start_msg_indexes(), byte_size, target);
    }
  }

  // repeated uint64 start_msg_randoms = 17;
  {
    int byte_size = _start_msg_randoms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          17, _internal_start_msg_randoms(), byte_size, target);
    }
  }

  // int64 start_at = 20;
  if (this->start_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_start_at(), target);
  }

  // int64 end_at = 21;
  if (this->end_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_end_at(), target);
  }

  // string close_reason = 24;
  if (this->close_reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_reason().data(), static_cast<int>(this->_internal_close_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.close_reason");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_close_reason(), target);
  }

  // int32 disconnect_user_index = 25;
  if (this->disconnect_user_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_disconnect_user_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleLogFile)
  return target;
}

size_t BattleLogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleLogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GamePatch patches = 7;
  total_size += 1UL * this->_internal_patches_size();
  for (const auto& msg : this->patches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.BattleLogUser users = 11;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.BattleMessage battle_data = 12;
  total_size += 1UL * this->_internal_battle_data_size();
  for (const auto& msg : this->battle_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 inputs = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inputs_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 start_msg_indexes = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->start_msg_indexes_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_msg_indexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 start_msg_randoms = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->start_msg_randoms_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_msg_randoms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string gdxsv_version_deprecated = 2;
  if (this->gdxsv_version_deprecated().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gdxsv_version_deprecated());
  }

  // string battle_code = 3;
  if (this->battle_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battle_code());
  }

  // string game_disk = 5;
  if (this->game_disk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_disk());
  }

  // bytes rule_bin = 10;
  if (this->rule_bin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rule_bin());
  }

  // string close_reason = 24;
  if (this->close_reason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_reason());
  }

  // int32 log_file_version = 4;
  if (this->log_file_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_log_file_version());
  }

  // int32 disconnect_user_index = 25;
  if (this->disconnect_user_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disconnect_user_index());
  }

  // int64 start_at = 20;
  if (this->start_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_at());
  }

  // int64 end_at = 21;
  if (this->end_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleLogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleLogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleLogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleLogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleLogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleLogFile)
    MergeFrom(*source);
  }
}

void BattleLogFile::MergeFrom(const BattleLogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleLogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patches_.MergeFrom(from.patches_);
  users_.MergeFrom(from.users_);
  battle_data_.MergeFrom(from.battle_data_);
  inputs_.MergeFrom(from.inputs_);
  start_msg_indexes_.MergeFrom(from.start_msg_indexes_);
  start_msg_randoms_.MergeFrom(from.start_msg_randoms_);
  if (from.gdxsv_version_deprecated().size() > 0) {
    _internal_set_gdxsv_version_deprecated(from._internal_gdxsv_version_deprecated());
  }
  if (from.battle_code().size() > 0) {
    _internal_set_battle_code(from._internal_battle_code());
  }
  if (from.game_disk().size() > 0) {
    _internal_set_game_disk(from._internal_game_disk());
  }
  if (from.rule_bin().size() > 0) {
    _internal_set_rule_bin(from._internal_rule_bin());
  }
  if (from.close_reason().size() > 0) {
    _internal_set_close_reason(from._internal_close_reason());
  }
  if (from.log_file_version() != 0) {
    _internal_set_log_file_version(from._internal_log_file_version());
  }
  if (from.disconnect_user_index() != 0) {
    _internal_set_disconnect_user_index(from._internal_disconnect_user_index());
  }
  if (from.start_at() != 0) {
    _internal_set_start_at(from._internal_start_at());
  }
  if (from.end_at() != 0) {
    _internal_set_end_at(from._internal_end_at());
  }
}

void BattleLogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleLogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLogFile::CopyFrom(const BattleLogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleLogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLogFile::IsInitialized() const {
  return true;
}

void BattleLogFile::InternalSwap(BattleLogFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  patches_.InternalSwap(&other->patches_);
  users_.InternalSwap(&other->users_);
  battle_data_.InternalSwap(&other->battle_data_);
  inputs_.InternalSwap(&other->inputs_);
  start_msg_indexes_.InternalSwap(&other->start_msg_indexes_);
  start_msg_randoms_.InternalSwap(&other->start_msg_randoms_);
  gdxsv_version_deprecated_.Swap(&other->gdxsv_version_deprecated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battle_code_.Swap(&other->battle_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_disk_.Swap(&other->game_disk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.Swap(&other->rule_bin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_reason_.Swap(&other->close_reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleLogFile, end_at_)
      + sizeof(BattleLogFile::end_at_)
      - PROTOBUF_FIELD_OFFSET(BattleLogFile, log_file_version_)>(
          reinterpret_cast<char*>(&log_file_version_),
          reinterpret_cast<char*>(&other->log_file_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleLogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleMessage::InitAsDefaultInstance() {
}
class BattleMessage::_Internal {
 public:
};

BattleMessage::BattleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleMessage)
}
BattleMessage::BattleMessage(const BattleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:proto.BattleMessage)
}

void BattleMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleMessage_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seq_ = 0u;
}

BattleMessage::~BattleMessage() {
  // @@protoc_insertion_point(destructor:proto.BattleMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleMessage::ArenaDtor(void* object) {
  BattleMessage* _this = reinterpret_cast< BattleMessage* >(object);
  (void)_this;
}
void BattleMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleMessage& BattleMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void BattleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  seq_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seq(), target);
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleMessage)
  return target;
}

size_t BattleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleMessage)
    MergeFrom(*source);
  }
}

void BattleMessage::MergeFrom(const BattleMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void BattleMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleMessage::CopyFrom(const BattleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleMessage::IsInitialized() const {
  return true;
}

void BattleMessage::InternalSwap(BattleMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingMessage::InitAsDefaultInstance() {
}
class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.PingMessage)
}

void PingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PingMessage_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:proto.PingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingMessage::ArenaDtor(void* object) {
  PingMessage* _this = reinterpret_cast< PingMessage* >(object);
  (void)_this;
}
void PingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingMessage& PingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PingMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PingMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PingMessage)
  return target;
}

size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PingMessage)
    MergeFrom(*source);
  }
}

void PingMessage::MergeFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void PingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PongMessage::InitAsDefaultInstance() {
}
class PongMessage::_Internal {
 public:
};

PongMessage::PongMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.PongMessage)
}
PongMessage::PongMessage(const PongMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  public_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_addr().empty()) {
    public_addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_addr(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.PongMessage)
}

void PongMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PongMessage_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

PongMessage::~PongMessage() {
  // @@protoc_insertion_point(destructor:proto.PongMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PongMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PongMessage::ArenaDtor(void* object) {
  PongMessage* _this = reinterpret_cast< PongMessage* >(object);
  (void)_this;
}
void PongMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PongMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PongMessage& PongMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PongMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void PongMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PongMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PongMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PongMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.PongMessage.public_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PongMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PongMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PongMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // string public_addr = 3;
  if (this->public_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_addr().data(), static_cast<int>(this->_internal_public_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PongMessage.public_addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PongMessage)
  return target;
}

size_t PongMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PongMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string public_addr = 3;
  if (this->public_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_addr());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PongMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PongMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PongMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PongMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PongMessage)
    MergeFrom(*source);
  }
}

void PongMessage::MergeFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PongMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.public_addr().size() > 0) {
    _internal_set_public_addr(from._internal_public_addr());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void PongMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongMessage::CopyFrom(const PongMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PongMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongMessage::IsInitialized() const {
  return true;
}

void PongMessage::InternalSwap(PongMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_addr_.Swap(&other->public_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PongMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloServerMessage::InitAsDefaultInstance() {
}
class HelloServerMessage::_Internal {
 public:
};

HelloServerMessage::HelloServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.HelloServerMessage)
}
HelloServerMessage::HelloServerMessage(const HelloServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id_deprecated().empty()) {
    session_id_deprecated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_id_deprecated(),
      GetArena());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:proto.HelloServerMessage)
}

void HelloServerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloServerMessage_gdxsv_2eproto.base);
  session_id_deprecated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ok_ = false;
}

HelloServerMessage::~HelloServerMessage() {
  // @@protoc_insertion_point(destructor:proto.HelloServerMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HelloServerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_deprecated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloServerMessage::ArenaDtor(void* object) {
  HelloServerMessage* _this = reinterpret_cast< HelloServerMessage* >(object);
  (void)_this;
}
void HelloServerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloServerMessage& HelloServerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloServerMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void HelloServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HelloServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_deprecated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloServerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_id_deprecated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id_deprecated();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.HelloServerMessage.session_id_deprecated"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.HelloServerMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloServerMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HelloServerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id_deprecated = 1;
  if (this->session_id_deprecated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id_deprecated().data(), static_cast<int>(this->_internal_session_id_deprecated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.HelloServerMessage.session_id_deprecated");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id_deprecated(), target);
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.HelloServerMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HelloServerMessage)
  return target;
}

size_t HelloServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HelloServerMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id_deprecated = 1;
  if (this->session_id_deprecated().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id_deprecated());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bool ok = 2;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloServerMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HelloServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloServerMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloServerMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HelloServerMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HelloServerMessage)
    MergeFrom(*source);
  }
}

void HelloServerMessage::MergeFrom(const HelloServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HelloServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id_deprecated().size() > 0) {
    _internal_set_session_id_deprecated(from._internal_session_id_deprecated());
  }
  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
}

void HelloServerMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HelloServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloServerMessage::CopyFrom(const HelloServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HelloServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloServerMessage::IsInitialized() const {
  return true;
}

void HelloServerMessage::InternalSwap(HelloServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_id_deprecated_.Swap(&other->session_id_deprecated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloServerMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FinMessage::InitAsDefaultInstance() {
}
class FinMessage::_Internal {
 public:
};

FinMessage::FinMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.FinMessage)
}
FinMessage::FinMessage(const FinMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_detail(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:proto.FinMessage)
}

void FinMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FinMessage_gdxsv_2eproto.base);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FinMessage::~FinMessage() {
  // @@protoc_insertion_point(destructor:proto.FinMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FinMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FinMessage::ArenaDtor(void* object) {
  FinMessage* _this = reinterpret_cast< FinMessage* >(object);
  (void)_this;
}
void FinMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FinMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FinMessage& FinMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FinMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void FinMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FinMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string detail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.FinMessage.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FinMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.FinMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string detail = 1;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.FinMessage.detail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FinMessage)
  return target;
}

size_t FinMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FinMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 1;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FinMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FinMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FinMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FinMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FinMessage)
    MergeFrom(*source);
  }
}

void FinMessage::MergeFrom(const FinMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FinMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {
    _internal_set_detail(from._internal_detail());
  }
}

void FinMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinMessage::CopyFrom(const FinMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FinMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinMessage::IsInitialized() const {
  return true;
}

void FinMessage::InternalSwap(FinMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FinMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloLbsMessage::InitAsDefaultInstance() {
}
class HelloLbsMessage::_Internal {
 public:
};

HelloLbsMessage::HelloLbsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.HelloLbsMessage)
}
HelloLbsMessage::HelloLbsMessage(const HelloLbsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:proto.HelloLbsMessage)
}

void HelloLbsMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloLbsMessage_gdxsv_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HelloLbsMessage::~HelloLbsMessage() {
  // @@protoc_insertion_point(destructor:proto.HelloLbsMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HelloLbsMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloLbsMessage::ArenaDtor(void* object) {
  HelloLbsMessage* _this = reinterpret_cast< HelloLbsMessage* >(object);
  (void)_this;
}
void HelloLbsMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HelloLbsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloLbsMessage& HelloLbsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloLbsMessage_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void HelloLbsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HelloLbsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloLbsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.HelloLbsMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloLbsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HelloLbsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.HelloLbsMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HelloLbsMessage)
  return target;
}

size_t HelloLbsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HelloLbsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloLbsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HelloLbsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloLbsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloLbsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HelloLbsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HelloLbsMessage)
    MergeFrom(*source);
  }
}

void HelloLbsMessage::MergeFrom(const HelloLbsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HelloLbsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void HelloLbsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HelloLbsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloLbsMessage::CopyFrom(const HelloLbsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HelloLbsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloLbsMessage::IsInitialized() const {
  return true;
}

void HelloLbsMessage::InternalSwap(HelloLbsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloLbsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::proto::_Packet_default_instance_._instance.get_mutable()->hello_server_data_ = const_cast< ::proto::HelloServerMessage*>(
      ::proto::HelloServerMessage::internal_default_instance());
  ::proto::_Packet_default_instance_._instance.get_mutable()->ping_data_ = const_cast< ::proto::PingMessage*>(
      ::proto::PingMessage::internal_default_instance());
  ::proto::_Packet_default_instance_._instance.get_mutable()->pong_data_ = const_cast< ::proto::PongMessage*>(
      ::proto::PongMessage::internal_default_instance());
  ::proto::_Packet_default_instance_._instance.get_mutable()->fin_data_ = const_cast< ::proto::FinMessage*>(
      ::proto::FinMessage::internal_default_instance());
  ::proto::_Packet_default_instance_._instance.get_mutable()->hello_lbs_data_ = const_cast< ::proto::HelloLbsMessage*>(
      ::proto::HelloLbsMessage::internal_default_instance());
}
class Packet::_Internal {
 public:
  static const ::proto::HelloServerMessage& hello_server_data(const Packet* msg);
  static const ::proto::PingMessage& ping_data(const Packet* msg);
  static const ::proto::PongMessage& pong_data(const Packet* msg);
  static const ::proto::FinMessage& fin_data(const Packet* msg);
  static const ::proto::HelloLbsMessage& hello_lbs_data(const Packet* msg);
};

const ::proto::HelloServerMessage&
Packet::_Internal::hello_server_data(const Packet* msg) {
  return *msg->hello_server_data_;
}
const ::proto::PingMessage&
Packet::_Internal::ping_data(const Packet* msg) {
  return *msg->ping_data_;
}
const ::proto::PongMessage&
Packet::_Internal::pong_data(const Packet* msg) {
  return *msg->pong_data_;
}
const ::proto::FinMessage&
Packet::_Internal::fin_data(const Packet* msg) {
  return *msg->fin_data_;
}
const ::proto::HelloLbsMessage&
Packet::_Internal::hello_lbs_data(const Packet* msg) {
  return *msg->hello_lbs_data_;
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battle_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battle_data_(from.battle_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_id(),
      GetArena());
  }
  if (from._internal_has_hello_server_data()) {
    hello_server_data_ = new ::proto::HelloServerMessage(*from.hello_server_data_);
  } else {
    hello_server_data_ = nullptr;
  }
  if (from._internal_has_ping_data()) {
    ping_data_ = new ::proto::PingMessage(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  if (from._internal_has_pong_data()) {
    pong_data_ = new ::proto::PongMessage(*from.pong_data_);
  } else {
    pong_data_ = nullptr;
  }
  if (from._internal_has_fin_data()) {
    fin_data_ = new ::proto::FinMessage(*from.fin_data_);
  } else {
    fin_data_ = nullptr;
  }
  if (from._internal_has_hello_lbs_data()) {
    hello_lbs_data_ = new ::proto::HelloLbsMessage(*from.hello_lbs_data_);
  } else {
    hello_lbs_data_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ack_));
  // @@protoc_insertion_point(copy_constructor:proto.Packet)
}

void Packet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Packet_gdxsv_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hello_server_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&hello_server_data_)) + sizeof(ack_));
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:proto.Packet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hello_server_data_;
  if (this != internal_default_instance()) delete ping_data_;
  if (this != internal_default_instance()) delete pong_data_;
  if (this != internal_default_instance()) delete fin_data_;
  if (this != internal_default_instance()) delete hello_lbs_data_;
}

void Packet::ArenaDtor(void* object) {
  Packet* _this = reinterpret_cast< Packet* >(object);
  (void)_this;
}
void Packet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Packet_gdxsv_2eproto.base);
  return *internal_default_instance();
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_data_.Clear();
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hello_server_data_ != nullptr) {
    delete hello_server_data_;
  }
  hello_server_data_ = nullptr;
  if (GetArena() == nullptr && ping_data_ != nullptr) {
    delete ping_data_;
  }
  ping_data_ = nullptr;
  if (GetArena() == nullptr && pong_data_ != nullptr) {
    delete pong_data_;
  }
  pong_data_ = nullptr;
  if (GetArena() == nullptr && fin_data_ != nullptr) {
    delete fin_data_;
  }
  fin_data_ = nullptr;
  if (GetArena() == nullptr && hello_lbs_data_ != nullptr) {
    delete hello_lbs_data_;
  }
  hello_lbs_data_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto.MessageType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ack = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.Packet.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.HelloServerMessage hello_server_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hello_server_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.PingMessage ping_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.PongMessage pong_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleMessage battle_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battle_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .proto.FinMessage fin_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_fin_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto.HelloLbsMessage hello_lbs_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_hello_lbs_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Packet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.MessageType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_seq(), target);
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ack(), target);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Packet.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // .proto.HelloServerMessage hello_server_data = 10;
  if (this->has_hello_server_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hello_server_data(this), target, stream);
  }

  // .proto.PingMessage ping_data = 11;
  if (this->has_ping_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::ping_data(this), target, stream);
  }

  // .proto.PongMessage pong_data = 12;
  if (this->has_pong_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pong_data(this), target, stream);
  }

  // repeated .proto.BattleMessage battle_data = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battle_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_battle_data(i), target, stream);
  }

  // .proto.FinMessage fin_data = 14;
  if (this->has_fin_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::fin_data(this), target, stream);
  }

  // .proto.HelloLbsMessage hello_lbs_data = 15;
  if (this->has_hello_lbs_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::hello_lbs_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Packet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.BattleMessage battle_data = 13;
  total_size += 1UL * this->_internal_battle_data_size();
  for (const auto& msg : this->battle_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .proto.HelloServerMessage hello_server_data = 10;
  if (this->has_hello_server_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hello_server_data_);
  }

  // .proto.PingMessage ping_data = 11;
  if (this->has_ping_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_data_);
  }

  // .proto.PongMessage pong_data = 12;
  if (this->has_pong_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pong_data_);
  }

  // .proto.FinMessage fin_data = 14;
  if (this->has_fin_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fin_data_);
  }

  // .proto.HelloLbsMessage hello_lbs_data = 15;
  if (this->has_hello_lbs_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hello_lbs_data_);
  }

  // .proto.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Packet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.Packet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battle_data_.MergeFrom(from.battle_data_);
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_hello_server_data()) {
    _internal_mutable_hello_server_data()->::proto::HelloServerMessage::MergeFrom(from._internal_hello_server_data());
  }
  if (from.has_ping_data()) {
    _internal_mutable_ping_data()->::proto::PingMessage::MergeFrom(from._internal_ping_data());
  }
  if (from.has_pong_data()) {
    _internal_mutable_pong_data()->::proto::PongMessage::MergeFrom(from._internal_pong_data());
  }
  if (from.has_fin_data()) {
    _internal_mutable_fin_data()->::proto::FinMessage::MergeFrom(from._internal_fin_data());
  }
  if (from.has_hello_lbs_data()) {
    _internal_mutable_hello_lbs_data()->::proto::HelloLbsMessage::MergeFrom(from._internal_hello_lbs_data());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.ack() != 0) {
    _internal_set_ack(from._internal_ack());
  }
}

void Packet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battle_data_.InternalSwap(&other->battle_data_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Packet, ack_)
      + sizeof(Packet::ack_)
      - PROTOBUF_FIELD_OFFSET(Packet, hello_server_data_)>(
          reinterpret_cast<char*>(&hello_server_data_),
          reinterpret_cast<char*>(&other->hello_server_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::P2PMatchingReport* Arena::CreateMaybeMessage< ::proto::P2PMatchingReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::P2PMatchingReport >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::P2PMatching* Arena::CreateMaybeMessage< ::proto::P2PMatching >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::P2PMatching >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlayerAddress* Arena::CreateMaybeMessage< ::proto::PlayerAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlayerAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GamePatch* Arena::CreateMaybeMessage< ::proto::GamePatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GamePatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GamePatchCode* Arena::CreateMaybeMessage< ::proto::GamePatchCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GamePatchCode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GamePatchList* Arena::CreateMaybeMessage< ::proto::GamePatchList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GamePatchList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BattleLogUser* Arena::CreateMaybeMessage< ::proto::BattleLogUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleLogUser >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BattleLogFile* Arena::CreateMaybeMessage< ::proto::BattleLogFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleLogFile >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BattleMessage* Arena::CreateMaybeMessage< ::proto::BattleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PingMessage* Arena::CreateMaybeMessage< ::proto::PingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PongMessage* Arena::CreateMaybeMessage< ::proto::PongMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PongMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HelloServerMessage* Arena::CreateMaybeMessage< ::proto::HelloServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HelloServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::FinMessage* Arena::CreateMaybeMessage< ::proto::FinMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::FinMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HelloLbsMessage* Arena::CreateMaybeMessage< ::proto::HelloLbsMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HelloLbsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Packet* Arena::CreateMaybeMessage< ::proto::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
